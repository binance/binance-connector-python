"""
Binance Derivatives Trading USDS Futures REST API

OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.utils import normalize_query_values, is_one_of_model, snake_to_camel

from binance_sdk_derivatives_trading_usds_futures.rest_api.api import AccountApi
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    AccountInformationV2Response,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    AccountInformationV3Response,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    FuturesAccountBalanceV2Response,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    FuturesAccountBalanceV3Response,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    FuturesAccountConfigurationResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    FuturesTradingQuantitativeRulesIndicatorsResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    GetBnbBurnStatusResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    GetCurrentMultiAssetsModeResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    GetCurrentPositionModeResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    GetDownloadIdForFuturesOrderHistoryResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    GetDownloadIdForFuturesTradeHistoryResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    GetDownloadIdForFuturesTransactionHistoryResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    GetFuturesOrderHistoryDownloadLinkByIdResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    GetFuturesTradeDownloadLinkByIdResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    GetFuturesTransactionHistoryDownloadLinkByIdResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    GetIncomeHistoryResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    NotionalAndLeverageBracketsResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    QueryUserRateLimitResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    SymbolConfigurationResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    ToggleBnbBurnOnFuturesTradeResponse,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    UserCommissionRateResponse,
)


class TestAccountApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = AccountApi(configuration=config, session=self.mock_session)

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_account_information_v2_success(self, mock_get_signature):
        """Test account_information_v2() successfully with required parameters only."""

        expected_response = {
            "feeTier": 0,
            "feeBurn": True,
            "canDeposit": True,
            "canWithdraw": True,
            "updateTime": 0,
            "multiAssetsMargin": True,
            "tradeGroupId": -1,
            "totalInitialMargin": "0.00000000",
            "totalMaintMargin": "0.00000000",
            "totalWalletBalance": "126.72469206",
            "totalUnrealizedProfit": "0.00000000",
            "totalMarginBalance": "126.72469206",
            "totalPositionInitialMargin": "0.00000000",
            "totalOpenOrderInitialMargin": "0.00000000",
            "totalCrossWalletBalance": "126.72469206",
            "totalCrossUnPnl": "0.00000000",
            "availableBalance": "126.72469206",
            "maxWithdrawAmount": "126.72469206",
            "assets": [
                {
                    "asset": "USDT",
                    "walletBalance": "23.72469206",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "23.72469206",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "23.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "marginAvailable": True,
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "BUSD",
                    "walletBalance": "103.12345678",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "103.12345678",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "103.12345678",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "103.12345678",
                    "maxWithdrawAmount": "103.12345678",
                    "marginAvailable": True,
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "USDT",
                    "walletBalance": "23.72469206",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "23.72469206",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "126.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "marginAvailable": True,
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "BUSD",
                    "walletBalance": "103.12345678",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "103.12345678",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "103.12345678",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "126.72469206",
                    "maxWithdrawAmount": "103.12345678",
                    "marginAvailable": True,
                    "updateTime": 1625474304765,
                },
            ],
            "positions": [
                {
                    "symbol": "BTCUSDT",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "unrealizedProfit": "0.00000000",
                    "positionInitialMargin": "0",
                    "openOrderInitialMargin": "0",
                    "leverage": "100",
                    "isolated": True,
                    "entryPrice": "0.00000",
                    "maxNotional": "250000",
                    "bidNotional": "0",
                    "askNotional": "0",
                    "positionSide": "BOTH",
                    "positionAmt": "0",
                    "updateTime": 0,
                },
                {
                    "symbol": "BTCUSDT",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "unrealizedProfit": "0.00000000",
                    "positionInitialMargin": "0",
                    "openOrderInitialMargin": "0",
                    "leverage": "100",
                    "isolated": True,
                    "entryPrice": "0.00000",
                    "maxNotional": "250000",
                    "bidNotional": "0",
                    "askNotional": "0",
                    "positionSide": "BOTH",
                    "positionAmt": "0",
                    "updateTime": 0,
                },
            ],
            "canTrade": True,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.account_information_v2()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v2/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AccountInformationV2Response)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = AccountInformationV2Response.from_dict(expected_response)
        else:
            expected = AccountInformationV2Response.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_account_information_v2_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test account_information_v2() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "feeTier": 0,
            "feeBurn": True,
            "canDeposit": True,
            "canWithdraw": True,
            "updateTime": 0,
            "multiAssetsMargin": True,
            "tradeGroupId": -1,
            "totalInitialMargin": "0.00000000",
            "totalMaintMargin": "0.00000000",
            "totalWalletBalance": "126.72469206",
            "totalUnrealizedProfit": "0.00000000",
            "totalMarginBalance": "126.72469206",
            "totalPositionInitialMargin": "0.00000000",
            "totalOpenOrderInitialMargin": "0.00000000",
            "totalCrossWalletBalance": "126.72469206",
            "totalCrossUnPnl": "0.00000000",
            "availableBalance": "126.72469206",
            "maxWithdrawAmount": "126.72469206",
            "assets": [
                {
                    "asset": "USDT",
                    "walletBalance": "23.72469206",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "23.72469206",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "23.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "marginAvailable": True,
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "BUSD",
                    "walletBalance": "103.12345678",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "103.12345678",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "103.12345678",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "103.12345678",
                    "maxWithdrawAmount": "103.12345678",
                    "marginAvailable": True,
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "USDT",
                    "walletBalance": "23.72469206",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "23.72469206",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "126.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "marginAvailable": True,
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "BUSD",
                    "walletBalance": "103.12345678",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "103.12345678",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "103.12345678",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "126.72469206",
                    "maxWithdrawAmount": "103.12345678",
                    "marginAvailable": True,
                    "updateTime": 1625474304765,
                },
            ],
            "positions": [
                {
                    "symbol": "BTCUSDT",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "unrealizedProfit": "0.00000000",
                    "positionInitialMargin": "0",
                    "openOrderInitialMargin": "0",
                    "leverage": "100",
                    "isolated": True,
                    "entryPrice": "0.00000",
                    "maxNotional": "250000",
                    "bidNotional": "0",
                    "askNotional": "0",
                    "positionSide": "BOTH",
                    "positionAmt": "0",
                    "updateTime": 0,
                },
                {
                    "symbol": "BTCUSDT",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "unrealizedProfit": "0.00000000",
                    "positionInitialMargin": "0",
                    "openOrderInitialMargin": "0",
                    "leverage": "100",
                    "isolated": True,
                    "entryPrice": "0.00000",
                    "maxNotional": "250000",
                    "bidNotional": "0",
                    "askNotional": "0",
                    "positionSide": "BOTH",
                    "positionAmt": "0",
                    "updateTime": 0,
                },
            ],
            "canTrade": True,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.account_information_v2(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v2/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AccountInformationV2Response)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = AccountInformationV2Response.from_dict(expected_response)
        else:
            expected = AccountInformationV2Response.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_account_information_v2_server_error(self):
        """Test that account_information_v2() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.account_information_v2 = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.account_information_v2()

    @patch("binance_common.utils.get_signature")
    def test_account_information_v3_success(self, mock_get_signature):
        """Test account_information_v3() successfully with required parameters only."""

        expected_response = {
            "totalInitialMargin": "0.00000000",
            "totalMaintMargin": "0.00000000",
            "totalWalletBalance": "126.72469206",
            "totalUnrealizedProfit": "0.00000000",
            "totalMarginBalance": "126.72469206",
            "totalPositionInitialMargin": "0.00000000",
            "totalOpenOrderInitialMargin": "0.00000000",
            "totalCrossWalletBalance": "126.72469206",
            "totalCrossUnPnl": "0.00000000",
            "availableBalance": "126.72469206",
            "maxWithdrawAmount": "126.72469206",
            "assets": [
                {
                    "asset": "USDT",
                    "walletBalance": "23.72469206",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "23.72469206",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "23.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "USDC",
                    "walletBalance": "103.12345678",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "103.12345678",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "103.12345678",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "126.72469206",
                    "maxWithdrawAmount": "103.12345678",
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "USDT",
                    "walletBalance": "23.72469206",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "23.72469206",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "126.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "BUSD",
                    "walletBalance": "103.12345678",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "103.12345678",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "103.12345678",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "126.72469206",
                    "maxWithdrawAmount": "103.12345678",
                    "updateTime": 1625474304765,
                },
            ],
            "positions": [
                {
                    "symbol": "BTCUSDT",
                    "positionSide": "BOTH",
                    "positionAmt": "1.000",
                    "unrealizedProfit": "0.00000000",
                    "isolatedMargin": "0.00000000",
                    "notional": "0",
                    "isolatedWallet": "0",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "updateTime": 0,
                },
                {
                    "symbol": "BTCUSDT",
                    "positionSide": "BOTH",
                    "positionAmt": "1.000",
                    "unrealizedProfit": "0.00000000",
                    "isolatedMargin": "0.00000000",
                    "notional": "0",
                    "isolatedWallet": "0",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "updateTime": 0,
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.account_information_v3()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v3/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AccountInformationV3Response)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = AccountInformationV3Response.from_dict(expected_response)
        else:
            expected = AccountInformationV3Response.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_account_information_v3_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test account_information_v3() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "totalInitialMargin": "0.00000000",
            "totalMaintMargin": "0.00000000",
            "totalWalletBalance": "126.72469206",
            "totalUnrealizedProfit": "0.00000000",
            "totalMarginBalance": "126.72469206",
            "totalPositionInitialMargin": "0.00000000",
            "totalOpenOrderInitialMargin": "0.00000000",
            "totalCrossWalletBalance": "126.72469206",
            "totalCrossUnPnl": "0.00000000",
            "availableBalance": "126.72469206",
            "maxWithdrawAmount": "126.72469206",
            "assets": [
                {
                    "asset": "USDT",
                    "walletBalance": "23.72469206",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "23.72469206",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "23.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "USDC",
                    "walletBalance": "103.12345678",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "103.12345678",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "103.12345678",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "126.72469206",
                    "maxWithdrawAmount": "103.12345678",
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "USDT",
                    "walletBalance": "23.72469206",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "23.72469206",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "126.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "updateTime": 1625474304765,
                },
                {
                    "asset": "BUSD",
                    "walletBalance": "103.12345678",
                    "unrealizedProfit": "0.00000000",
                    "marginBalance": "103.12345678",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "crossWalletBalance": "103.12345678",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "126.72469206",
                    "maxWithdrawAmount": "103.12345678",
                    "updateTime": 1625474304765,
                },
            ],
            "positions": [
                {
                    "symbol": "BTCUSDT",
                    "positionSide": "BOTH",
                    "positionAmt": "1.000",
                    "unrealizedProfit": "0.00000000",
                    "isolatedMargin": "0.00000000",
                    "notional": "0",
                    "isolatedWallet": "0",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "updateTime": 0,
                },
                {
                    "symbol": "BTCUSDT",
                    "positionSide": "BOTH",
                    "positionAmt": "1.000",
                    "unrealizedProfit": "0.00000000",
                    "isolatedMargin": "0.00000000",
                    "notional": "0",
                    "isolatedWallet": "0",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "updateTime": 0,
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.account_information_v3(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v3/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AccountInformationV3Response)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = AccountInformationV3Response.from_dict(expected_response)
        else:
            expected = AccountInformationV3Response.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_account_information_v3_server_error(self):
        """Test that account_information_v3() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.account_information_v3 = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.account_information_v3()

    @patch("binance_common.utils.get_signature")
    def test_futures_account_balance_v2_success(self, mock_get_signature):
        """Test futures_account_balance_v2() successfully with required parameters only."""

        expected_response = [
            {
                "accountAlias": "SgsR",
                "asset": "USDT",
                "balance": "122607.35137903",
                "crossWalletBalance": "23.72469206",
                "crossUnPnl": "0.00000000",
                "availableBalance": "23.72469206",
                "maxWithdrawAmount": "23.72469206",
                "marginAvailable": True,
                "updateTime": 1617939110373,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.futures_account_balance_v2()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v2/balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FuturesAccountBalanceV2Response)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FuturesAccountBalanceV2Response.from_dict(expected_response)
        else:
            expected = FuturesAccountBalanceV2Response.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_futures_account_balance_v2_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test futures_account_balance_v2() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = [
            {
                "accountAlias": "SgsR",
                "asset": "USDT",
                "balance": "122607.35137903",
                "crossWalletBalance": "23.72469206",
                "crossUnPnl": "0.00000000",
                "availableBalance": "23.72469206",
                "maxWithdrawAmount": "23.72469206",
                "marginAvailable": True,
                "updateTime": 1617939110373,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.futures_account_balance_v2(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v2/balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FuturesAccountBalanceV2Response)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FuturesAccountBalanceV2Response.from_dict(expected_response)
        else:
            expected = FuturesAccountBalanceV2Response.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_futures_account_balance_v2_server_error(self):
        """Test that futures_account_balance_v2() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.futures_account_balance_v2 = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.futures_account_balance_v2()

    @patch("binance_common.utils.get_signature")
    def test_futures_account_balance_v3_success(self, mock_get_signature):
        """Test futures_account_balance_v3() successfully with required parameters only."""

        expected_response = [
            {
                "accountAlias": "SgsR",
                "asset": "USDT",
                "balance": "122607.35137903",
                "crossWalletBalance": "23.72469206",
                "crossUnPnl": "0.00000000",
                "availableBalance": "23.72469206",
                "maxWithdrawAmount": "23.72469206",
                "marginAvailable": True,
                "updateTime": 1617939110373,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.futures_account_balance_v3()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v3/balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FuturesAccountBalanceV3Response)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FuturesAccountBalanceV3Response.from_dict(expected_response)
        else:
            expected = FuturesAccountBalanceV3Response.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_futures_account_balance_v3_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test futures_account_balance_v3() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = [
            {
                "accountAlias": "SgsR",
                "asset": "USDT",
                "balance": "122607.35137903",
                "crossWalletBalance": "23.72469206",
                "crossUnPnl": "0.00000000",
                "availableBalance": "23.72469206",
                "maxWithdrawAmount": "23.72469206",
                "marginAvailable": True,
                "updateTime": 1617939110373,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.futures_account_balance_v3(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v3/balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FuturesAccountBalanceV3Response)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FuturesAccountBalanceV3Response.from_dict(expected_response)
        else:
            expected = FuturesAccountBalanceV3Response.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_futures_account_balance_v3_server_error(self):
        """Test that futures_account_balance_v3() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.futures_account_balance_v3 = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.futures_account_balance_v3()

    @patch("binance_common.utils.get_signature")
    def test_futures_account_configuration_success(self, mock_get_signature):
        """Test futures_account_configuration() successfully with required parameters only."""

        expected_response = {
            "feeTier": 0,
            "canTrade": True,
            "canDeposit": True,
            "canWithdraw": True,
            "dualSidePosition": True,
            "updateTime": 0,
            "multiAssetsMargin": False,
            "tradeGroupId": -1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.futures_account_configuration()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/accountConfig" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FuturesAccountConfigurationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FuturesAccountConfigurationResponse.from_dict(expected_response)
        else:
            expected = FuturesAccountConfigurationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_futures_account_configuration_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test futures_account_configuration() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "feeTier": 0,
            "canTrade": True,
            "canDeposit": True,
            "canWithdraw": True,
            "dualSidePosition": True,
            "updateTime": 0,
            "multiAssetsMargin": False,
            "tradeGroupId": -1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.futures_account_configuration(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/accountConfig" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FuturesAccountConfigurationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FuturesAccountConfigurationResponse.from_dict(expected_response)
        else:
            expected = FuturesAccountConfigurationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_futures_account_configuration_server_error(self):
        """Test that futures_account_configuration() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.futures_account_configuration = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.futures_account_configuration()

    @patch("binance_common.utils.get_signature")
    def test_futures_trading_quantitative_rules_indicators_success(
        self, mock_get_signature
    ):
        """Test futures_trading_quantitative_rules_indicators() successfully with required parameters only."""

        expected_response = {
            "indicators": {
                "BTCUSDT": [
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "UFR",
                        "value": 0.05,
                        "triggerValue": 0.995,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "IFER",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "GCR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "DR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                ],
                "ETHUSDT": [
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "UFR",
                        "value": 0.05,
                        "triggerValue": 0.995,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "IFER",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "GCR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "DR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                ],
                "ACCOUNT": [
                    {
                        "indicator": "TMV",
                        "value": 10,
                        "triggerValue": 1,
                        "plannedRecoverTime": 1644919865000,
                        "isLocked": True,
                    }
                ],
            },
            "updateTime": 1644913304748,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.futures_trading_quantitative_rules_indicators()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/apiTradingStatus" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FuturesTradingQuantitativeRulesIndicatorsResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FuturesTradingQuantitativeRulesIndicatorsResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                FuturesTradingQuantitativeRulesIndicatorsResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_futures_trading_quantitative_rules_indicators_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test futures_trading_quantitative_rules_indicators() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = {
            "indicators": {
                "BTCUSDT": [
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "UFR",
                        "value": 0.05,
                        "triggerValue": 0.995,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "IFER",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "GCR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "DR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                ],
                "ETHUSDT": [
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "UFR",
                        "value": 0.05,
                        "triggerValue": 0.995,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "IFER",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "GCR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "DR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                ],
                "ACCOUNT": [
                    {
                        "indicator": "TMV",
                        "value": 10,
                        "triggerValue": 1,
                        "plannedRecoverTime": 1644919865000,
                        "isLocked": True,
                    }
                ],
            },
            "updateTime": 1644913304748,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.futures_trading_quantitative_rules_indicators(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/apiTradingStatus" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FuturesTradingQuantitativeRulesIndicatorsResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FuturesTradingQuantitativeRulesIndicatorsResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                FuturesTradingQuantitativeRulesIndicatorsResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_futures_trading_quantitative_rules_indicators_server_error(self):
        """Test that futures_trading_quantitative_rules_indicators() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.futures_trading_quantitative_rules_indicators = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.futures_trading_quantitative_rules_indicators()

    @patch("binance_common.utils.get_signature")
    def test_get_bnb_burn_status_success(self, mock_get_signature):
        """Test get_bnb_burn_status() successfully with required parameters only."""

        expected_response = {"feeBurn": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_bnb_burn_status()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/feeBurn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetBnbBurnStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetBnbBurnStatusResponse.from_dict(expected_response)
        else:
            expected = GetBnbBurnStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_bnb_burn_status_success_with_optional_params(self, mock_get_signature):
        """Test get_bnb_burn_status() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"feeBurn": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_bnb_burn_status(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/feeBurn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetBnbBurnStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetBnbBurnStatusResponse.from_dict(expected_response)
        else:
            expected = GetBnbBurnStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_bnb_burn_status_server_error(self):
        """Test that get_bnb_burn_status() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_bnb_burn_status = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_bnb_burn_status()

    @patch("binance_common.utils.get_signature")
    def test_get_current_multi_assets_mode_success(self, mock_get_signature):
        """Test get_current_multi_assets_mode() successfully with required parameters only."""

        expected_response = {"multiAssetsMargin": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_current_multi_assets_mode()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/multiAssetsMargin" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCurrentMultiAssetsModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCurrentMultiAssetsModeResponse.from_dict(expected_response)
        else:
            expected = GetCurrentMultiAssetsModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_current_multi_assets_mode_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_current_multi_assets_mode() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"multiAssetsMargin": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_current_multi_assets_mode(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/multiAssetsMargin" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCurrentMultiAssetsModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCurrentMultiAssetsModeResponse.from_dict(expected_response)
        else:
            expected = GetCurrentMultiAssetsModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_current_multi_assets_mode_server_error(self):
        """Test that get_current_multi_assets_mode() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_current_multi_assets_mode = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_current_multi_assets_mode()

    @patch("binance_common.utils.get_signature")
    def test_get_current_position_mode_success(self, mock_get_signature):
        """Test get_current_position_mode() successfully with required parameters only."""

        expected_response = {"dualSidePosition": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_current_position_mode()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/positionSide/dual" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCurrentPositionModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCurrentPositionModeResponse.from_dict(expected_response)
        else:
            expected = GetCurrentPositionModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_current_position_mode_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_current_position_mode() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"dualSidePosition": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_current_position_mode(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/positionSide/dual" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCurrentPositionModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCurrentPositionModeResponse.from_dict(expected_response)
        else:
            expected = GetCurrentPositionModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_current_position_mode_server_error(self):
        """Test that get_current_position_mode() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_current_position_mode = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_current_position_mode()

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_futures_order_history_success(
        self, mock_get_signature
    ):
        """Test get_download_id_for_futures_order_history() successfully with required parameters only."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_futures_order_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/order/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["startTime"] == 1623319461670
        assert normalized["endTime"] == 1641782889000

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForFuturesOrderHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForFuturesOrderHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = GetDownloadIdForFuturesOrderHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_futures_order_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_download_id_for_futures_order_history() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "recv_window": 5000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_futures_order_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/order/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForFuturesOrderHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForFuturesOrderHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = GetDownloadIdForFuturesOrderHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_download_id_for_futures_order_history_missing_required_param_start_time(
        self,
    ):
        """Test that get_download_id_for_futures_order_history() raises RequiredError when 'start_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["start_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'start_time'"
        ):
            self.client.get_download_id_for_futures_order_history(**params)

    def test_get_download_id_for_futures_order_history_missing_required_param_end_time(
        self,
    ):
        """Test that get_download_id_for_futures_order_history() raises RequiredError when 'end_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["end_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'end_time'"
        ):
            self.client.get_download_id_for_futures_order_history(**params)

    def test_get_download_id_for_futures_order_history_server_error(self):
        """Test that get_download_id_for_futures_order_history() raises an error when the server returns an error."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        mock_error = Exception("ResponseError")
        self.client.get_download_id_for_futures_order_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_download_id_for_futures_order_history(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_futures_trade_history_success(
        self, mock_get_signature
    ):
        """Test get_download_id_for_futures_trade_history() successfully with required parameters only."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_futures_trade_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/trade/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["startTime"] == 1623319461670
        assert normalized["endTime"] == 1641782889000

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForFuturesTradeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForFuturesTradeHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = GetDownloadIdForFuturesTradeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_futures_trade_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_download_id_for_futures_trade_history() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "recv_window": 5000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_futures_trade_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/trade/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForFuturesTradeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForFuturesTradeHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = GetDownloadIdForFuturesTradeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_download_id_for_futures_trade_history_missing_required_param_start_time(
        self,
    ):
        """Test that get_download_id_for_futures_trade_history() raises RequiredError when 'start_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["start_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'start_time'"
        ):
            self.client.get_download_id_for_futures_trade_history(**params)

    def test_get_download_id_for_futures_trade_history_missing_required_param_end_time(
        self,
    ):
        """Test that get_download_id_for_futures_trade_history() raises RequiredError when 'end_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["end_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'end_time'"
        ):
            self.client.get_download_id_for_futures_trade_history(**params)

    def test_get_download_id_for_futures_trade_history_server_error(self):
        """Test that get_download_id_for_futures_trade_history() raises an error when the server returns an error."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        mock_error = Exception("ResponseError")
        self.client.get_download_id_for_futures_trade_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_download_id_for_futures_trade_history(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_futures_transaction_history_success(
        self, mock_get_signature
    ):
        """Test get_download_id_for_futures_transaction_history() successfully with required parameters only."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_futures_transaction_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/income/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["startTime"] == 1623319461670
        assert normalized["endTime"] == 1641782889000

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForFuturesTransactionHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForFuturesTransactionHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetDownloadIdForFuturesTransactionHistoryResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_futures_transaction_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_download_id_for_futures_transaction_history() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "recv_window": 5000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_futures_transaction_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/income/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForFuturesTransactionHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForFuturesTransactionHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetDownloadIdForFuturesTransactionHistoryResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_download_id_for_futures_transaction_history_missing_required_param_start_time(
        self,
    ):
        """Test that get_download_id_for_futures_transaction_history() raises RequiredError when 'start_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["start_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'start_time'"
        ):
            self.client.get_download_id_for_futures_transaction_history(**params)

    def test_get_download_id_for_futures_transaction_history_missing_required_param_end_time(
        self,
    ):
        """Test that get_download_id_for_futures_transaction_history() raises RequiredError when 'end_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["end_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'end_time'"
        ):
            self.client.get_download_id_for_futures_transaction_history(**params)

    def test_get_download_id_for_futures_transaction_history_server_error(self):
        """Test that get_download_id_for_futures_transaction_history() raises an error when the server returns an error."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        mock_error = Exception("ResponseError")
        self.client.get_download_id_for_futures_transaction_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_download_id_for_futures_transaction_history(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_futures_order_history_download_link_by_id_success(
        self, mock_get_signature
    ):
        """Test get_futures_order_history_download_link_by_id() successfully with required parameters only."""

        params = {
            "download_id": "1",
        }

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_futures_order_history_download_link_by_id(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/order/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["downloadId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFuturesOrderHistoryDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFuturesOrderHistoryDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetFuturesOrderHistoryDownloadLinkByIdResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_futures_order_history_download_link_by_id_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_futures_order_history_download_link_by_id() successfully with optional parameters."""

        params = {"download_id": "1", "recv_window": 5000}

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_futures_order_history_download_link_by_id(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/order/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFuturesOrderHistoryDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFuturesOrderHistoryDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetFuturesOrderHistoryDownloadLinkByIdResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_futures_order_history_download_link_by_id_missing_required_param_download_id(
        self,
    ):
        """Test that get_futures_order_history_download_link_by_id() raises RequiredError when 'download_id' is missing."""
        params = {
            "download_id": "1",
        }
        params["download_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'download_id'"
        ):
            self.client.get_futures_order_history_download_link_by_id(**params)

    def test_get_futures_order_history_download_link_by_id_server_error(self):
        """Test that get_futures_order_history_download_link_by_id() raises an error when the server returns an error."""

        params = {
            "download_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.get_futures_order_history_download_link_by_id = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_futures_order_history_download_link_by_id(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_futures_trade_download_link_by_id_success(self, mock_get_signature):
        """Test get_futures_trade_download_link_by_id() successfully with required parameters only."""

        params = {
            "download_id": "1",
        }

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_futures_trade_download_link_by_id(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/trade/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["downloadId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFuturesTradeDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFuturesTradeDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = GetFuturesTradeDownloadLinkByIdResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_futures_trade_download_link_by_id_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_futures_trade_download_link_by_id() successfully with optional parameters."""

        params = {"download_id": "1", "recv_window": 5000}

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_futures_trade_download_link_by_id(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/trade/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFuturesTradeDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFuturesTradeDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = GetFuturesTradeDownloadLinkByIdResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_futures_trade_download_link_by_id_missing_required_param_download_id(
        self,
    ):
        """Test that get_futures_trade_download_link_by_id() raises RequiredError when 'download_id' is missing."""
        params = {
            "download_id": "1",
        }
        params["download_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'download_id'"
        ):
            self.client.get_futures_trade_download_link_by_id(**params)

    def test_get_futures_trade_download_link_by_id_server_error(self):
        """Test that get_futures_trade_download_link_by_id() raises an error when the server returns an error."""

        params = {
            "download_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.get_futures_trade_download_link_by_id = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_futures_trade_download_link_by_id(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_futures_transaction_history_download_link_by_id_success(
        self, mock_get_signature
    ):
        """Test get_futures_transaction_history_download_link_by_id() successfully with required parameters only."""

        params = {
            "download_id": "1",
        }

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_futures_transaction_history_download_link_by_id(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/income/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["downloadId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFuturesTransactionHistoryDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFuturesTransactionHistoryDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = GetFuturesTransactionHistoryDownloadLinkByIdResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_futures_transaction_history_download_link_by_id_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_futures_transaction_history_download_link_by_id() successfully with optional parameters."""

        params = {"download_id": "1", "recv_window": 5000}

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_futures_transaction_history_download_link_by_id(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/income/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFuturesTransactionHistoryDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFuturesTransactionHistoryDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = GetFuturesTransactionHistoryDownloadLinkByIdResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_futures_transaction_history_download_link_by_id_missing_required_param_download_id(
        self,
    ):
        """Test that get_futures_transaction_history_download_link_by_id() raises RequiredError when 'download_id' is missing."""
        params = {
            "download_id": "1",
        }
        params["download_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'download_id'"
        ):
            self.client.get_futures_transaction_history_download_link_by_id(**params)

    def test_get_futures_transaction_history_download_link_by_id_server_error(self):
        """Test that get_futures_transaction_history_download_link_by_id() raises an error when the server returns an error."""

        params = {
            "download_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.get_futures_transaction_history_download_link_by_id = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_futures_transaction_history_download_link_by_id(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_income_history_success(self, mock_get_signature):
        """Test get_income_history() successfully with required parameters only."""

        expected_response = [
            {
                "symbol": "",
                "incomeType": "TRANSFER",
                "income": "-0.37500000",
                "asset": "USDT",
                "info": "TRANSFER",
                "time": 1570608000000,
                "tranId": 9689322392,
                "tradeId": "",
            },
            {
                "symbol": "BTCUSDT",
                "incomeType": "COMMISSION",
                "income": "-0.01000000",
                "asset": "USDT",
                "info": "COMMISSION",
                "time": 1570636800000,
                "tranId": 9689322392,
                "tradeId": "2059192",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_income_history()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/income" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetIncomeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetIncomeHistoryResponse.from_dict(expected_response)
        else:
            expected = GetIncomeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_income_history_success_with_optional_params(self, mock_get_signature):
        """Test get_income_history() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "income_type": "income_type_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "page": 56,
            "limit": 100,
            "recv_window": 5000,
        }

        expected_response = [
            {
                "symbol": "",
                "incomeType": "TRANSFER",
                "income": "-0.37500000",
                "asset": "USDT",
                "info": "TRANSFER",
                "time": 1570608000000,
                "tranId": 9689322392,
                "tradeId": "",
            },
            {
                "symbol": "BTCUSDT",
                "incomeType": "COMMISSION",
                "income": "-0.01000000",
                "asset": "USDT",
                "info": "COMMISSION",
                "time": 1570636800000,
                "tranId": 9689322392,
                "tradeId": "2059192",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_income_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/income" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetIncomeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetIncomeHistoryResponse.from_dict(expected_response)
        else:
            expected = GetIncomeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_income_history_server_error(self):
        """Test that get_income_history() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_income_history = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_income_history()

    @patch("binance_common.utils.get_signature")
    def test_notional_and_leverage_brackets_success(self, mock_get_signature):
        """Test notional_and_leverage_brackets() successfully with required parameters only."""

        expected_response = [
            {
                "symbol": "ETHUSDT",
                "notionalCoef": 1.5,
                "brackets": [
                    {
                        "bracket": 1,
                        "initialLeverage": 75,
                        "notionalCap": 10000,
                        "notionalFloor": 0,
                        "maintMarginRatio": 0.0065,
                        "cum": 0,
                    }
                ],
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.notional_and_leverage_brackets()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/leverageBracket" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(NotionalAndLeverageBracketsResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = NotionalAndLeverageBracketsResponse.from_dict(expected_response)
        else:
            expected = NotionalAndLeverageBracketsResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_notional_and_leverage_brackets_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test notional_and_leverage_brackets() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = [
            {
                "symbol": "ETHUSDT",
                "notionalCoef": 1.5,
                "brackets": [
                    {
                        "bracket": 1,
                        "initialLeverage": 75,
                        "notionalCap": 10000,
                        "notionalFloor": 0,
                        "maintMarginRatio": 0.0065,
                        "cum": 0,
                    }
                ],
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.notional_and_leverage_brackets(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/leverageBracket" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(NotionalAndLeverageBracketsResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = NotionalAndLeverageBracketsResponse.from_dict(expected_response)
        else:
            expected = NotionalAndLeverageBracketsResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_notional_and_leverage_brackets_server_error(self):
        """Test that notional_and_leverage_brackets() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.notional_and_leverage_brackets = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.notional_and_leverage_brackets()

    @patch("binance_common.utils.get_signature")
    def test_query_user_rate_limit_success(self, mock_get_signature):
        """Test query_user_rate_limit() successfully with required parameters only."""

        expected_response = [
            {
                "rateLimitType": "ORDERS",
                "interval": "SECOND",
                "intervalNum": 10,
                "limit": 10000,
            },
            {
                "rateLimitType": "ORDERS",
                "interval": "MINUTE",
                "intervalNum": 1,
                "limit": 20000,
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_rate_limit()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/rateLimit/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserRateLimitResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryUserRateLimitResponse.from_dict(expected_response)
        else:
            expected = QueryUserRateLimitResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_user_rate_limit_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_user_rate_limit() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = [
            {
                "rateLimitType": "ORDERS",
                "interval": "SECOND",
                "intervalNum": 10,
                "limit": 10000,
            },
            {
                "rateLimitType": "ORDERS",
                "interval": "MINUTE",
                "intervalNum": 1,
                "limit": 20000,
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_rate_limit(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/rateLimit/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserRateLimitResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryUserRateLimitResponse.from_dict(expected_response)
        else:
            expected = QueryUserRateLimitResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_user_rate_limit_server_error(self):
        """Test that query_user_rate_limit() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_user_rate_limit = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_user_rate_limit()

    @patch("binance_common.utils.get_signature")
    def test_symbol_configuration_success(self, mock_get_signature):
        """Test symbol_configuration() successfully with required parameters only."""

        expected_response = [
            {
                "symbol": "BTCUSDT",
                "marginType": "CROSSED",
                "isAutoAddMargin": "False",
                "leverage": 21,
                "maxNotionalValue": "1000000",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.symbol_configuration()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/symbolConfig" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SymbolConfigurationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SymbolConfigurationResponse.from_dict(expected_response)
        else:
            expected = SymbolConfigurationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_symbol_configuration_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test symbol_configuration() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = [
            {
                "symbol": "BTCUSDT",
                "marginType": "CROSSED",
                "isAutoAddMargin": "False",
                "leverage": 21,
                "maxNotionalValue": "1000000",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.symbol_configuration(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/symbolConfig" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SymbolConfigurationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SymbolConfigurationResponse.from_dict(expected_response)
        else:
            expected = SymbolConfigurationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_symbol_configuration_server_error(self):
        """Test that symbol_configuration() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.symbol_configuration = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.symbol_configuration()

    @patch("binance_common.utils.get_signature")
    def test_toggle_bnb_burn_on_futures_trade_success(self, mock_get_signature):
        """Test toggle_bnb_burn_on_futures_trade() successfully with required parameters only."""

        params = {
            "fee_burn": "fee_burn_example",
        }

        expected_response = {"code": 200, "msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.toggle_bnb_burn_on_futures_trade(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/feeBurn" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["feeBurn"] == "fee_burn_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ToggleBnbBurnOnFuturesTradeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ToggleBnbBurnOnFuturesTradeResponse.from_dict(expected_response)
        else:
            expected = ToggleBnbBurnOnFuturesTradeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_toggle_bnb_burn_on_futures_trade_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test toggle_bnb_burn_on_futures_trade() successfully with optional parameters."""

        params = {"fee_burn": "fee_burn_example", "recv_window": 5000}

        expected_response = {"code": 200, "msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.toggle_bnb_burn_on_futures_trade(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/feeBurn" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ToggleBnbBurnOnFuturesTradeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ToggleBnbBurnOnFuturesTradeResponse.from_dict(expected_response)
        else:
            expected = ToggleBnbBurnOnFuturesTradeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_toggle_bnb_burn_on_futures_trade_missing_required_param_fee_burn(self):
        """Test that toggle_bnb_burn_on_futures_trade() raises RequiredError when 'fee_burn' is missing."""
        params = {
            "fee_burn": "fee_burn_example",
        }
        params["fee_burn"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'fee_burn'"
        ):
            self.client.toggle_bnb_burn_on_futures_trade(**params)

    def test_toggle_bnb_burn_on_futures_trade_server_error(self):
        """Test that toggle_bnb_burn_on_futures_trade() raises an error when the server returns an error."""

        params = {
            "fee_burn": "fee_burn_example",
        }

        mock_error = Exception("ResponseError")
        self.client.toggle_bnb_burn_on_futures_trade = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.toggle_bnb_burn_on_futures_trade(**params)

    @patch("binance_common.utils.get_signature")
    def test_user_commission_rate_success(self, mock_get_signature):
        """Test user_commission_rate() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
        }

        expected_response = {
            "symbol": "BTCUSDT",
            "makerCommissionRate": "0.0002",
            "takerCommissionRate": "0.0004",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.user_commission_rate(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/commissionRate" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["symbol"] == "symbol_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UserCommissionRateResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = UserCommissionRateResponse.from_dict(expected_response)
        else:
            expected = UserCommissionRateResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_user_commission_rate_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test user_commission_rate() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = {
            "symbol": "BTCUSDT",
            "makerCommissionRate": "0.0002",
            "takerCommissionRate": "0.0004",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.user_commission_rate(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/commissionRate" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UserCommissionRateResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = UserCommissionRateResponse.from_dict(expected_response)
        else:
            expected = UserCommissionRateResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_user_commission_rate_missing_required_param_symbol(self):
        """Test that user_commission_rate() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.user_commission_rate(**params)

    def test_user_commission_rate_server_error(self):
        """Test that user_commission_rate() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
        }

        mock_error = Exception("ResponseError")
        self.client.user_commission_rate = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.user_commission_rate(**params)
