"""
Binance Derivatives Trading USDS Futures WebSocket API

OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import pytest

from unittest.mock import AsyncMock, MagicMock

from binance_common.models import WebsocketApiResponse
from binance_common.utils import parse_ws_rate_limit_headers
from binance_sdk_derivatives_trading_usds_futures.websocket_api.api import AccountApi


from binance_sdk_derivatives_trading_usds_futures.websocket_api.models import (
    AccountInformationResponse,
)
from binance_sdk_derivatives_trading_usds_futures.websocket_api.models import (
    AccountInformationV2Response,
)
from binance_sdk_derivatives_trading_usds_futures.websocket_api.models import (
    FuturesAccountBalanceResponse,
)
from binance_sdk_derivatives_trading_usds_futures.websocket_api.models import (
    FuturesAccountBalanceV2Response,
)


class TestWebSocketAccountApi:
    @pytest.fixture(autouse=True)
    def setup_method(self):
        self.mock_websocket_api = MagicMock()
        self.websocket_api = AccountApi(websocket_api=self.mock_websocket_api)

    @pytest.mark.asyncio
    async def test_account_information_success(self):
        """Test account_information() successfully with required parameters only."""

        expected_response = {
            "id": "605a6d20-6588-4cb9-afa0-b0ab087507ba",
            "status": 200,
            "result": {
                "feeTier": 0,
                "canTrade": True,
                "canDeposit": True,
                "canWithdraw": True,
                "updateTime": 0,
                "multiAssetsMargin": True,
                "tradeGroupId": -1,
                "totalInitialMargin": "0.00000000",
                "totalMaintMargin": "0.00000000",
                "totalWalletBalance": "126.72469206",
                "totalUnrealizedProfit": "0.00000000",
                "totalMarginBalance": "126.72469206",
                "totalPositionInitialMargin": "0.00000000",
                "totalOpenOrderInitialMargin": "0.00000000",
                "totalCrossWalletBalance": "126.72469206",
                "totalCrossUnPnl": "0.00000000",
                "availableBalance": "126.72469206",
                "maxWithdrawAmount": "126.72469206",
                "assets": [
                    {
                        "asset": "USDT",
                        "walletBalance": "23.72469206",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "23.72469206",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "23.72469206",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "23.72469206",
                        "maxWithdrawAmount": "23.72469206",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "BUSD",
                        "walletBalance": "103.12345678",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "103.12345678",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "103.12345678",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "103.12345678",
                        "maxWithdrawAmount": "103.12345678",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "USDT",
                        "walletBalance": "23.72469206",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "23.72469206",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "23.72469206",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "126.72469206",
                        "maxWithdrawAmount": "23.72469206",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "BUSD",
                        "walletBalance": "103.12345678",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "103.12345678",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "103.12345678",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "126.72469206",
                        "maxWithdrawAmount": "103.12345678",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                ],
                "positions": [
                    {
                        "symbol": "BTCUSDT",
                        "initialMargin": "0",
                        "maintMargin": "0",
                        "unrealizedProfit": "0.00000000",
                        "positionInitialMargin": "0",
                        "openOrderInitialMargin": "0",
                        "leverage": "100",
                        "isolated": True,
                        "entryPrice": "0.00000",
                        "maxNotional": "250000",
                        "bidNotional": "0",
                        "askNotional": "0",
                        "positionSide": "BOTH",
                        "positionAmt": "0",
                        "updateTime": 0,
                    },
                    {
                        "symbol": "BTCUSDT",
                        "initialMargin": "0",
                        "maintMargin": "0",
                        "unrealizedProfit": "0.00000000",
                        "positionInitialMargin": "0",
                        "openOrderInitialMargin": "0",
                        "leverage": "100",
                        "isolated": True,
                        "entryPrice": "0.00000",
                        "breakEvenPrice": "0.0",
                        "maxNotional": "250000",
                        "bidNotional": "0",
                        "askNotional": "0",
                        "positionSide": "BOTH",
                        "positionAmt": "0",
                        "updateTime": 0,
                    },
                ],
            },
            "rateLimits": [
                {
                    "rateLimitType": "REQUEST_WEIGHT",
                    "interval": "MINUTE",
                    "intervalNum": 1,
                    "limit": 2400,
                    "count": 20,
                }
            ],
        }

        self.mock_websocket_api.send_signed_message = AsyncMock(
            return_value=WebsocketApiResponse(
                data_function=lambda: expected_response,
                rate_limits=(
                    parse_ws_rate_limit_headers(expected_response["rateLimits"])
                    if "rateLimits" in expected_response
                    else None
                ),
            )
        )
        result = await self.websocket_api.account_information()

        actual_call_args = self.mock_websocket_api.send_signed_message.call_args
        request_kwargs = actual_call_args.kwargs

        assert "payload" in request_kwargs
        assert "method" in request_kwargs["payload"]
        assert request_kwargs["payload"]["method"] == "/account.status".replace(
            "/", "", 1
        )

        assert result is not None
        assert result.data() == expected_response
        self.mock_websocket_api.send_signed_message.assert_called_once_with(
            payload={"method": "/account.status".replace("/", "", 1), "params": {}},
            response_model=AccountInformationResponse,
            signer=None,
        )

    @pytest.mark.asyncio
    async def test_account_information_success_with_optional_params(self):
        """Test account_information() successfully with optional parameters."""

        params = {"id": "e9d6b4349871b40611412680b3445fac", "recv_window": 5000}

        expected_response = {
            "id": "605a6d20-6588-4cb9-afa0-b0ab087507ba",
            "status": 200,
            "result": {
                "feeTier": 0,
                "canTrade": True,
                "canDeposit": True,
                "canWithdraw": True,
                "updateTime": 0,
                "multiAssetsMargin": True,
                "tradeGroupId": -1,
                "totalInitialMargin": "0.00000000",
                "totalMaintMargin": "0.00000000",
                "totalWalletBalance": "126.72469206",
                "totalUnrealizedProfit": "0.00000000",
                "totalMarginBalance": "126.72469206",
                "totalPositionInitialMargin": "0.00000000",
                "totalOpenOrderInitialMargin": "0.00000000",
                "totalCrossWalletBalance": "126.72469206",
                "totalCrossUnPnl": "0.00000000",
                "availableBalance": "126.72469206",
                "maxWithdrawAmount": "126.72469206",
                "assets": [
                    {
                        "asset": "USDT",
                        "walletBalance": "23.72469206",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "23.72469206",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "23.72469206",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "23.72469206",
                        "maxWithdrawAmount": "23.72469206",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "BUSD",
                        "walletBalance": "103.12345678",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "103.12345678",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "103.12345678",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "103.12345678",
                        "maxWithdrawAmount": "103.12345678",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "USDT",
                        "walletBalance": "23.72469206",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "23.72469206",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "23.72469206",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "126.72469206",
                        "maxWithdrawAmount": "23.72469206",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "BUSD",
                        "walletBalance": "103.12345678",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "103.12345678",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "103.12345678",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "126.72469206",
                        "maxWithdrawAmount": "103.12345678",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                ],
                "positions": [
                    {
                        "symbol": "BTCUSDT",
                        "initialMargin": "0",
                        "maintMargin": "0",
                        "unrealizedProfit": "0.00000000",
                        "positionInitialMargin": "0",
                        "openOrderInitialMargin": "0",
                        "leverage": "100",
                        "isolated": True,
                        "entryPrice": "0.00000",
                        "maxNotional": "250000",
                        "bidNotional": "0",
                        "askNotional": "0",
                        "positionSide": "BOTH",
                        "positionAmt": "0",
                        "updateTime": 0,
                    },
                    {
                        "symbol": "BTCUSDT",
                        "initialMargin": "0",
                        "maintMargin": "0",
                        "unrealizedProfit": "0.00000000",
                        "positionInitialMargin": "0",
                        "openOrderInitialMargin": "0",
                        "leverage": "100",
                        "isolated": True,
                        "entryPrice": "0.00000",
                        "breakEvenPrice": "0.0",
                        "maxNotional": "250000",
                        "bidNotional": "0",
                        "askNotional": "0",
                        "positionSide": "BOTH",
                        "positionAmt": "0",
                        "updateTime": 0,
                    },
                ],
            },
            "rateLimits": [
                {
                    "rateLimitType": "REQUEST_WEIGHT",
                    "interval": "MINUTE",
                    "intervalNum": 1,
                    "limit": 2400,
                    "count": 20,
                }
            ],
        }

        self.mock_websocket_api.send_signed_message = AsyncMock(
            return_value=WebsocketApiResponse(
                data_function=lambda: expected_response,
                rate_limits=(
                    parse_ws_rate_limit_headers(expected_response["rateLimits"])
                    if "rateLimits" in expected_response
                    else None
                ),
            )
        )

        result = await self.websocket_api.account_information(**params)

        actual_call_args = self.mock_websocket_api.send_signed_message.call_args
        request_kwargs = actual_call_args.kwargs

        assert "payload" in request_kwargs
        assert "method" in request_kwargs["payload"]
        assert request_kwargs["payload"]["method"] == "/account.status".replace(
            "/", "", 1
        )
        assert "params" in request_kwargs["payload"]
        params = request_kwargs["payload"]["params"]
        assert params["id"] == "e9d6b4349871b40611412680b3445fac"
        assert params["recv_window"] == 5000

        assert result is not None
        assert result.data() == expected_response
        self.mock_websocket_api.send_signed_message.assert_called_once_with(
            payload={"method": "/account.status".replace("/", "", 1), "params": params},
            response_model=AccountInformationResponse,
            signer=None,
        )

    @pytest.mark.asyncio
    async def test_account_information_server_error(self):
        """Test that account_information() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.mock_websocket_api.send_signed_message.side_effect = mock_error

        with pytest.raises(Exception, match="ResponseError"):
            await self.websocket_api.account_information()

    @pytest.mark.asyncio
    async def test_account_information_v2_success(self):
        """Test account_information_v2() successfully with required parameters only."""

        expected_response = {
            "id": "605a6d20-6588-4cb9-afa0-b0ab087507ba",
            "status": 200,
            "result": {
                "totalInitialMargin": "0.00000000",
                "totalMaintMargin": "0.00000000",
                "totalWalletBalance": "126.72469206",
                "totalUnrealizedProfit": "0.00000000",
                "totalMarginBalance": "126.72469206",
                "totalPositionInitialMargin": "0.00000000",
                "totalOpenOrderInitialMargin": "0.00000000",
                "totalCrossWalletBalance": "126.72469206",
                "totalCrossUnPnl": "0.00000000",
                "availableBalance": "126.72469206",
                "maxWithdrawAmount": "126.72469206",
                "assets": [
                    {
                        "asset": "USDT",
                        "walletBalance": "23.72469206",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "23.72469206",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "23.72469206",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "23.72469206",
                        "maxWithdrawAmount": "23.72469206",
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "USDC",
                        "walletBalance": "103.12345678",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "103.12345678",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "103.12345678",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "126.72469206",
                        "maxWithdrawAmount": "103.12345678",
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "USDT",
                        "walletBalance": "23.72469206",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "23.72469206",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "23.72469206",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "126.72469206",
                        "maxWithdrawAmount": "23.72469206",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "BUSD",
                        "walletBalance": "103.12345678",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "103.12345678",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "103.12345678",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "126.72469206",
                        "maxWithdrawAmount": "103.12345678",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                ],
                "positions": [
                    {
                        "symbol": "BTCUSDT",
                        "positionSide": "BOTH",
                        "positionAmt": "1.000",
                        "unrealizedProfit": "0.00000000",
                        "isolatedMargin": "0.00000000",
                        "notional": "0",
                        "isolatedWallet": "0",
                        "initialMargin": "0",
                        "maintMargin": "0",
                        "updateTime": 0,
                    },
                    {
                        "symbol": "BTCUSDT",
                        "positionSide": "BOTH",
                        "positionAmt": "1.000",
                        "unrealizedProfit": "0.00000000",
                        "isolatedMargin": "0.00000000",
                        "notional": "0",
                        "isolatedWallet": "0",
                        "initialMargin": "0",
                        "maintMargin": "0",
                        "updateTime": 0,
                    },
                ],
            },
            "rateLimits": [
                {
                    "rateLimitType": "REQUEST_WEIGHT",
                    "interval": "MINUTE",
                    "intervalNum": 1,
                    "limit": 2400,
                    "count": 20,
                }
            ],
        }

        self.mock_websocket_api.send_signed_message = AsyncMock(
            return_value=WebsocketApiResponse(
                data_function=lambda: expected_response,
                rate_limits=(
                    parse_ws_rate_limit_headers(expected_response["rateLimits"])
                    if "rateLimits" in expected_response
                    else None
                ),
            )
        )
        result = await self.websocket_api.account_information_v2()

        actual_call_args = self.mock_websocket_api.send_signed_message.call_args
        request_kwargs = actual_call_args.kwargs

        assert "payload" in request_kwargs
        assert "method" in request_kwargs["payload"]
        assert request_kwargs["payload"]["method"] == "/v2/account.status".replace(
            "/", "", 1
        )

        assert result is not None
        assert result.data() == expected_response
        self.mock_websocket_api.send_signed_message.assert_called_once_with(
            payload={"method": "/v2/account.status".replace("/", "", 1), "params": {}},
            response_model=AccountInformationV2Response,
            signer=None,
        )

    @pytest.mark.asyncio
    async def test_account_information_v2_success_with_optional_params(self):
        """Test account_information_v2() successfully with optional parameters."""

        params = {"id": "e9d6b4349871b40611412680b3445fac", "recv_window": 5000}

        expected_response = {
            "id": "605a6d20-6588-4cb9-afa0-b0ab087507ba",
            "status": 200,
            "result": {
                "totalInitialMargin": "0.00000000",
                "totalMaintMargin": "0.00000000",
                "totalWalletBalance": "126.72469206",
                "totalUnrealizedProfit": "0.00000000",
                "totalMarginBalance": "126.72469206",
                "totalPositionInitialMargin": "0.00000000",
                "totalOpenOrderInitialMargin": "0.00000000",
                "totalCrossWalletBalance": "126.72469206",
                "totalCrossUnPnl": "0.00000000",
                "availableBalance": "126.72469206",
                "maxWithdrawAmount": "126.72469206",
                "assets": [
                    {
                        "asset": "USDT",
                        "walletBalance": "23.72469206",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "23.72469206",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "23.72469206",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "23.72469206",
                        "maxWithdrawAmount": "23.72469206",
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "USDC",
                        "walletBalance": "103.12345678",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "103.12345678",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "103.12345678",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "126.72469206",
                        "maxWithdrawAmount": "103.12345678",
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "USDT",
                        "walletBalance": "23.72469206",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "23.72469206",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "23.72469206",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "126.72469206",
                        "maxWithdrawAmount": "23.72469206",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                    {
                        "asset": "BUSD",
                        "walletBalance": "103.12345678",
                        "unrealizedProfit": "0.00000000",
                        "marginBalance": "103.12345678",
                        "maintMargin": "0.00000000",
                        "initialMargin": "0.00000000",
                        "positionInitialMargin": "0.00000000",
                        "openOrderInitialMargin": "0.00000000",
                        "crossWalletBalance": "103.12345678",
                        "crossUnPnl": "0.00000000",
                        "availableBalance": "126.72469206",
                        "maxWithdrawAmount": "103.12345678",
                        "marginAvailable": True,
                        "updateTime": 1625474304765,
                    },
                ],
                "positions": [
                    {
                        "symbol": "BTCUSDT",
                        "positionSide": "BOTH",
                        "positionAmt": "1.000",
                        "unrealizedProfit": "0.00000000",
                        "isolatedMargin": "0.00000000",
                        "notional": "0",
                        "isolatedWallet": "0",
                        "initialMargin": "0",
                        "maintMargin": "0",
                        "updateTime": 0,
                    },
                    {
                        "symbol": "BTCUSDT",
                        "positionSide": "BOTH",
                        "positionAmt": "1.000",
                        "unrealizedProfit": "0.00000000",
                        "isolatedMargin": "0.00000000",
                        "notional": "0",
                        "isolatedWallet": "0",
                        "initialMargin": "0",
                        "maintMargin": "0",
                        "updateTime": 0,
                    },
                ],
            },
            "rateLimits": [
                {
                    "rateLimitType": "REQUEST_WEIGHT",
                    "interval": "MINUTE",
                    "intervalNum": 1,
                    "limit": 2400,
                    "count": 20,
                }
            ],
        }

        self.mock_websocket_api.send_signed_message = AsyncMock(
            return_value=WebsocketApiResponse(
                data_function=lambda: expected_response,
                rate_limits=(
                    parse_ws_rate_limit_headers(expected_response["rateLimits"])
                    if "rateLimits" in expected_response
                    else None
                ),
            )
        )

        result = await self.websocket_api.account_information_v2(**params)

        actual_call_args = self.mock_websocket_api.send_signed_message.call_args
        request_kwargs = actual_call_args.kwargs

        assert "payload" in request_kwargs
        assert "method" in request_kwargs["payload"]
        assert request_kwargs["payload"]["method"] == "/v2/account.status".replace(
            "/", "", 1
        )
        assert params["id"] == "e9d6b4349871b40611412680b3445fac"
        assert params["recv_window"] == 5000

        assert result is not None
        assert result.data() == expected_response
        self.mock_websocket_api.send_signed_message.assert_called_once_with(
            payload={
                "method": "/v2/account.status".replace("/", "", 1),
                "params": params,
            },
            response_model=AccountInformationV2Response,
            signer=None,
        )

    @pytest.mark.asyncio
    async def test_account_information_v2_server_error(self):
        """Test that account_information_v2() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.mock_websocket_api.send_signed_message.side_effect = mock_error

        with pytest.raises(Exception, match="ResponseError"):
            await self.websocket_api.account_information_v2()

    @pytest.mark.asyncio
    async def test_futures_account_balance_success(self):
        """Test futures_account_balance() successfully with required parameters only."""

        expected_response = {
            "id": "605a6d20-6588-4cb9-afa0-b0ab087507ba",
            "status": 200,
            "result": [
                {
                    "accountAlias": "SgsR",
                    "asset": "USDT",
                    "balance": "122607.35137903",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "23.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "marginAvailable": True,
                    "updateTime": 1617939110373,
                }
            ],
            "rateLimits": [
                {
                    "rateLimitType": "REQUEST_WEIGHT",
                    "interval": "MINUTE",
                    "intervalNum": 1,
                    "limit": 2400,
                    "count": 20,
                }
            ],
        }

        self.mock_websocket_api.send_signed_message = AsyncMock(
            return_value=WebsocketApiResponse(
                data_function=lambda: expected_response,
                rate_limits=(
                    parse_ws_rate_limit_headers(expected_response["rateLimits"])
                    if "rateLimits" in expected_response
                    else None
                ),
            )
        )
        result = await self.websocket_api.futures_account_balance()

        actual_call_args = self.mock_websocket_api.send_signed_message.call_args
        request_kwargs = actual_call_args.kwargs

        assert "payload" in request_kwargs
        assert "method" in request_kwargs["payload"]
        assert request_kwargs["payload"]["method"] == "/account.balance".replace(
            "/", "", 1
        )

        assert result is not None
        assert result.data() == expected_response
        self.mock_websocket_api.send_signed_message.assert_called_once_with(
            payload={"method": "/account.balance".replace("/", "", 1), "params": {}},
            response_model=FuturesAccountBalanceResponse,
            signer=None,
        )

    @pytest.mark.asyncio
    async def test_futures_account_balance_success_with_optional_params(self):
        """Test futures_account_balance() successfully with optional parameters."""

        params = {"id": "e9d6b4349871b40611412680b3445fac", "recv_window": 5000}

        expected_response = {
            "id": "605a6d20-6588-4cb9-afa0-b0ab087507ba",
            "status": 200,
            "result": [
                {
                    "accountAlias": "SgsR",
                    "asset": "USDT",
                    "balance": "122607.35137903",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "23.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "marginAvailable": True,
                    "updateTime": 1617939110373,
                }
            ],
            "rateLimits": [
                {
                    "rateLimitType": "REQUEST_WEIGHT",
                    "interval": "MINUTE",
                    "intervalNum": 1,
                    "limit": 2400,
                    "count": 20,
                }
            ],
        }

        self.mock_websocket_api.send_signed_message = AsyncMock(
            return_value=WebsocketApiResponse(
                data_function=lambda: expected_response,
                rate_limits=(
                    parse_ws_rate_limit_headers(expected_response["rateLimits"])
                    if "rateLimits" in expected_response
                    else None
                ),
            )
        )

        result = await self.websocket_api.futures_account_balance(**params)

        actual_call_args = self.mock_websocket_api.send_signed_message.call_args
        request_kwargs = actual_call_args.kwargs

        assert "payload" in request_kwargs
        assert "method" in request_kwargs["payload"]
        assert request_kwargs["payload"]["method"] == "/account.balance".replace(
            "/", "", 1
        )
        assert params["id"] == "e9d6b4349871b40611412680b3445fac"
        assert params["recv_window"] == 5000

        assert result is not None
        assert result.data() == expected_response
        self.mock_websocket_api.send_signed_message.assert_called_once_with(
            payload={
                "method": "/account.balance".replace("/", "", 1),
                "params": params,
            },
            response_model=FuturesAccountBalanceResponse,
            signer=None,
        )

    @pytest.mark.asyncio
    async def test_futures_account_balance_server_error(self):
        """Test that futures_account_balance() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.mock_websocket_api.send_signed_message.side_effect = mock_error

        with pytest.raises(Exception, match="ResponseError"):
            await self.websocket_api.futures_account_balance()

    @pytest.mark.asyncio
    async def test_futures_account_balance_v2_success(self):
        """Test futures_account_balance_v2() successfully with required parameters only."""

        expected_response = {
            "id": "605a6d20-6588-4cb9-afa0-b0ab087507ba",
            "status": 200,
            "result": [
                {
                    "accountAlias": "SgsR",
                    "asset": "USDT",
                    "balance": "122607.35137903",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "23.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "marginAvailable": True,
                    "updateTime": 1617939110373,
                }
            ],
            "rateLimits": [
                {
                    "rateLimitType": "REQUEST_WEIGHT",
                    "interval": "MINUTE",
                    "intervalNum": 1,
                    "limit": 2400,
                    "count": 20,
                }
            ],
        }

        self.mock_websocket_api.send_signed_message = AsyncMock(
            return_value=WebsocketApiResponse(
                data_function=lambda: expected_response,
                rate_limits=(
                    parse_ws_rate_limit_headers(expected_response["rateLimits"])
                    if "rateLimits" in expected_response
                    else None
                ),
            )
        )
        result = await self.websocket_api.futures_account_balance_v2()

        actual_call_args = self.mock_websocket_api.send_signed_message.call_args
        request_kwargs = actual_call_args.kwargs

        assert "payload" in request_kwargs
        assert "method" in request_kwargs["payload"]
        assert request_kwargs["payload"]["method"] == "/v2/account.balance".replace(
            "/", "", 1
        )

        assert result is not None
        assert result.data() == expected_response
        self.mock_websocket_api.send_signed_message.assert_called_once_with(
            payload={"method": "/v2/account.balance".replace("/", "", 1), "params": {}},
            response_model=FuturesAccountBalanceV2Response,
            signer=None,
        )

    @pytest.mark.asyncio
    async def test_futures_account_balance_v2_success_with_optional_params(self):
        """Test futures_account_balance_v2() successfully with optional parameters."""

        params = {"id": "e9d6b4349871b40611412680b3445fac", "recv_window": 5000}

        expected_response = {
            "id": "605a6d20-6588-4cb9-afa0-b0ab087507ba",
            "status": 200,
            "result": [
                {
                    "accountAlias": "SgsR",
                    "asset": "USDT",
                    "balance": "122607.35137903",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "availableBalance": "23.72469206",
                    "maxWithdrawAmount": "23.72469206",
                    "marginAvailable": True,
                    "updateTime": 1617939110373,
                }
            ],
            "rateLimits": [
                {
                    "rateLimitType": "REQUEST_WEIGHT",
                    "interval": "MINUTE",
                    "intervalNum": 1,
                    "limit": 2400,
                    "count": 20,
                }
            ],
        }

        self.mock_websocket_api.send_signed_message = AsyncMock(
            return_value=WebsocketApiResponse(
                data_function=lambda: expected_response,
                rate_limits=(
                    parse_ws_rate_limit_headers(expected_response["rateLimits"])
                    if "rateLimits" in expected_response
                    else None
                ),
            )
        )

        result = await self.websocket_api.futures_account_balance_v2(**params)

        actual_call_args = self.mock_websocket_api.send_signed_message.call_args
        request_kwargs = actual_call_args.kwargs

        assert "payload" in request_kwargs
        assert "method" in request_kwargs["payload"]
        assert request_kwargs["payload"]["method"] == "/v2/account.balance".replace(
            "/", "", 1
        )
        assert params["id"] == "e9d6b4349871b40611412680b3445fac"
        assert params["recv_window"] == 5000

        assert result is not None
        assert result.data() == expected_response
        self.mock_websocket_api.send_signed_message.assert_called_once_with(
            payload={
                "method": "/v2/account.balance".replace("/", "", 1),
                "params": params,
            },
            response_model=FuturesAccountBalanceV2Response,
            signer=None,
        )

    @pytest.mark.asyncio
    async def test_futures_account_balance_v2_server_error(self):
        """Test that futures_account_balance_v2() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.mock_websocket_api.send_signed_message.side_effect = mock_error

        with pytest.raises(Exception, match="ResponseError"):
            await self.websocket_api.futures_account_balance_v2()
