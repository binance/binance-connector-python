# coding: utf-8

"""
Binance Spot WebSocket API

OpenAPI Specifications for the Binance Spot WebSocket API

API documents:
  - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
  - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance_sdk_spot.websocket_api.models.list_status_o_inner import ListStatusOInner
from typing import Set
from typing_extensions import Self


class ListStatus(BaseModel):
    """
    ListStatus
    """  # noqa: E501

    E: Optional[StrictInt] = Field(default=None, alias="E")
    s: Optional[StrictStr] = None
    g: Optional[StrictInt] = None
    c: Optional[StrictStr] = None
    l: Optional[StrictStr] = None
    L: Optional[StrictStr] = Field(default=None, alias="L")
    r: Optional[StrictStr] = None
    C: Optional[StrictStr] = Field(default=None, alias="C")
    T: Optional[StrictInt] = Field(default=None, alias="T")
    O: Optional[List[ListStatusOInner]] = Field(default=None, alias="O")

    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "E",
        "s",
        "g",
        "c",
        "l",
        "L",
        "r",
        "C",
        "T",
        "O",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def is_array(cls) -> bool:
        return False

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in o (list)
        _items = []
        if self.o:
            for _item_o in self.o:
                if _item_o:
                    _items.append(_item_o.to_dict())
            _dict["O"] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "E": obj.get("E"),
                "s": obj.get("s"),
                "g": obj.get("g"),
                "c": obj.get("c"),
                "l": obj.get("l"),
                "L": obj.get("L"),
                "r": obj.get("r"),
                "C": obj.get("C"),
                "T": obj.get("T"),
                "O": (
                    [ListStatusOInner.from_dict(_item) for _item in obj["O"]]
                    if obj.get("O") is not None
                    else None
                ),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
