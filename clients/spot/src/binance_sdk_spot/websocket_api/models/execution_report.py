# coding: utf-8

"""
Binance Spot WebSocket API

OpenAPI Specifications for the Binance Spot WebSocket API

API documents:
  - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
  - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class ExecutionReport(BaseModel):
    """
    ExecutionReport
    """  # noqa: E501

    E: Optional[StrictInt] = Field(default=None, alias="E")
    s: Optional[StrictStr] = None
    c: Optional[StrictStr] = None
    S: Optional[StrictStr] = Field(default=None, alias="S")
    o: Optional[StrictStr] = None
    f: Optional[StrictStr] = None
    q: Optional[StrictStr] = None
    p: Optional[StrictStr] = None
    P: Optional[StrictStr] = Field(default=None, alias="P")
    F: Optional[StrictStr] = Field(default=None, alias="F")
    g: Optional[StrictInt] = None
    C: Optional[StrictStr] = Field(default=None, alias="C")
    x: Optional[StrictStr] = None
    X: Optional[StrictStr] = Field(default=None, alias="X")
    r: Optional[StrictStr] = None
    i: Optional[StrictInt] = None
    l: Optional[StrictStr] = None
    z: Optional[StrictStr] = None
    L: Optional[StrictStr] = Field(default=None, alias="L")
    n: Optional[StrictStr] = None
    N: Optional[StrictStr] = Field(default=None, alias="N")
    T: Optional[StrictInt] = Field(default=None, alias="T")
    t: Optional[StrictInt] = None
    v: Optional[StrictInt] = None
    I: Optional[StrictInt] = Field(default=None, alias="I")
    w: Optional[StrictBool] = None
    m: Optional[StrictBool] = None
    M: Optional[StrictBool] = Field(default=None, alias="M")
    O: Optional[StrictInt] = Field(default=None, alias="O")
    Z: Optional[StrictStr] = Field(default=None, alias="Z")
    Y: Optional[StrictStr] = Field(default=None, alias="Y")
    Q: Optional[StrictStr] = Field(default=None, alias="Q")
    W: Optional[StrictInt] = Field(default=None, alias="W")
    V: Optional[StrictStr] = Field(default=None, alias="V")
    d: Optional[StrictInt] = None
    D: Optional[StrictInt] = Field(default=None, alias="D")
    j: Optional[StrictInt] = None
    J: Optional[StrictInt] = Field(default=None, alias="J")
    A: Optional[StrictStr] = Field(default=None, alias="A")
    B: Optional[StrictStr] = Field(default=None, alias="B")
    u: Optional[StrictInt] = None
    U: Optional[StrictInt] = Field(default=None, alias="U")
    Cs: Optional[StrictStr] = Field(default=None, alias="Cs")
    pl: Optional[StrictStr] = None
    pL: Optional[StrictStr] = Field(default=None, alias="pL")
    pY: Optional[StrictStr] = Field(default=None, alias="pY")
    b: Optional[StrictStr] = None
    a: Optional[StrictInt] = None
    k: Optional[StrictStr] = None
    uS: Optional[StrictBool] = Field(default=None, alias="uS")
    gP: Optional[StrictStr] = Field(default=None, alias="gP")
    gOT: Optional[StrictStr] = Field(default=None, alias="gOT")
    gOV: Optional[StrictInt] = Field(default=None, alias="gOV")
    gp: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "E",
        "s",
        "c",
        "S",
        "o",
        "f",
        "q",
        "p",
        "P",
        "F",
        "g",
        "C",
        "x",
        "X",
        "r",
        "i",
        "l",
        "z",
        "L",
        "n",
        "N",
        "T",
        "t",
        "v",
        "I",
        "w",
        "m",
        "M",
        "O",
        "Z",
        "Y",
        "Q",
        "W",
        "V",
        "d",
        "D",
        "j",
        "J",
        "A",
        "B",
        "u",
        "U",
        "Cs",
        "pl",
        "pL",
        "pY",
        "b",
        "a",
        "k",
        "uS",
        "gP",
        "gOT",
        "gOV",
        "gp",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def is_array(cls) -> bool:
        return False

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExecutionReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExecutionReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "E": obj.get("E"),
                "s": obj.get("s"),
                "c": obj.get("c"),
                "S": obj.get("S"),
                "o": obj.get("o"),
                "f": obj.get("f"),
                "q": obj.get("q"),
                "p": obj.get("p"),
                "P": obj.get("P"),
                "F": obj.get("F"),
                "g": obj.get("g"),
                "C": obj.get("C"),
                "x": obj.get("x"),
                "X": obj.get("X"),
                "r": obj.get("r"),
                "i": obj.get("i"),
                "l": obj.get("l"),
                "z": obj.get("z"),
                "L": obj.get("L"),
                "n": obj.get("n"),
                "N": obj.get("N"),
                "T": obj.get("T"),
                "t": obj.get("t"),
                "v": obj.get("v"),
                "I": obj.get("I"),
                "w": obj.get("w"),
                "m": obj.get("m"),
                "M": obj.get("M"),
                "O": obj.get("O"),
                "Z": obj.get("Z"),
                "Y": obj.get("Y"),
                "Q": obj.get("Q"),
                "W": obj.get("W"),
                "V": obj.get("V"),
                "d": obj.get("d"),
                "D": obj.get("D"),
                "j": obj.get("j"),
                "J": obj.get("J"),
                "A": obj.get("A"),
                "B": obj.get("B"),
                "u": obj.get("u"),
                "U": obj.get("U"),
                "Cs": obj.get("Cs"),
                "pl": obj.get("pl"),
                "pL": obj.get("pL"),
                "pY": obj.get("pY"),
                "b": obj.get("b"),
                "a": obj.get("a"),
                "k": obj.get("k"),
                "uS": obj.get("uS"),
                "gP": obj.get("gP"),
                "gOT": obj.get("gOT"),
                "gOV": obj.get("gOV"),
                "gp": obj.get("gp"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
