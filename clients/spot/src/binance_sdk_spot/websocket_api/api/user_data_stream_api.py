"""
Binance Spot WebSocket API

OpenAPI Specifications for the Binance Spot WebSocket API

API documents:
  - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
  - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from binance_common.errors import RequiredError
from binance_common.models import WebsocketApiResponse
from binance_common.signature import Signers
from binance_common.websocket import WebSocketAPIBase

from ..models import SessionSubscriptionsResponse
from ..models import UserDataStreamPingResponse
from ..models import UserDataStreamStartResponse
from ..models import UserDataStreamStopResponse
from ..models import UserDataStreamSubscribeResponse
from ..models import UserDataStreamSubscribeSignatureResponse
from ..models import UserDataStreamUnsubscribeResponse


from typing import Optional, Union


class UserDataStreamApi:
    """API Client for UserDataStreamApi endpoints."""

    def __init__(
        self,
        websocket_api: WebSocketAPIBase,
        signer: Signers = None,
    ) -> None:
        self.websocket_api = websocket_api
        self.signer = signer

    async def session_subscriptions(
        self,
        id: Optional[str] = None,
    ) -> WebsocketApiResponse[SessionSubscriptionsResponse]:
        """
            WebSocket Listing all subscriptions
            /session.subscriptions
            https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#listing-all-subscriptions


        Weight: 2

        **Data Source**:
        Memory

            Args:
                    id (Optional[str] = None): Unique WebSocket request ID.

            Returns:
                WebsocketApiResponse[SessionSubscriptionsResponse]

            Raises:
                RequiredError: If a required parameter is missing.

        """

        params = {
            **({"id": id} if id is not None else {}),
        }

        payload = {
            "method": "/session.subscriptions".replace("/", "", 1),
            "params": params,
        }

        return await self.websocket_api.send_message(
            payload=payload, response_model=SessionSubscriptionsResponse
        )

    async def user_data_stream_ping(
        self,
        listen_key: Union[str, None],
        id: Optional[str] = None,
    ) -> WebsocketApiResponse[UserDataStreamPingResponse]:
        """
            WebSocket Ping user data stream
            /userDataStream.ping
            https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#ping-user-data-stream-user_stream

            Ping a user data stream to keep it alive.

        User data streams close automatically after 60 minutes,
        even if you're listening to them on WebSocket Streams.
        In order to keep the stream open, you have to regularly send pings using the `userDataStream.ping` request.

        It is recommended to send a ping once every 30 minutes.

        This request does not require `signature`.
        Weight: 2

            Args:
                    listen_key (Union[str, None]):
                    id (Optional[str] = None): Unique WebSocket request ID.

            Returns:
                WebsocketApiResponse[UserDataStreamPingResponse]

            Raises:
                RequiredError: If a required parameter is missing.

        """

        if listen_key is None:
            raise RequiredError(
                field="listen_key",
                error_message="Missing required parameter 'listen_key'",
            )

        params = {
            "listen_key": listen_key,
            **({"id": id} if id is not None else {}),
        }

        payload = {
            "method": "/userDataStream.ping".replace("/", "", 1),
            "params": params,
        }

        return await self.websocket_api.send_message(
            payload=payload, response_model=UserDataStreamPingResponse, api_key=True
        )

    async def user_data_stream_start(
        self,
        id: Optional[str] = None,
    ) -> WebsocketApiResponse[UserDataStreamStartResponse]:
        """
            WebSocket Start user data stream
            /userDataStream.start
            https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#start-user-data-stream-user_stream

            Start a new user data stream.
        Note the stream will close in 60 minutes unless `userDataStream.ping` requests are sent regularly.
        This request does not require `signature`.
        Weight: 2

            Args:
                    id (Optional[str] = None): Unique WebSocket request ID.

            Returns:
                WebsocketApiResponse[UserDataStreamStartResponse]

            Raises:
                RequiredError: If a required parameter is missing.

        """

        params = {
            **({"id": id} if id is not None else {}),
        }

        payload = {
            "method": "/userDataStream.start".replace("/", "", 1),
            "params": params,
        }

        return await self.websocket_api.send_message(
            payload=payload, response_model=UserDataStreamStartResponse, api_key=True
        )

    async def user_data_stream_stop(
        self,
        listen_key: Union[str, None],
        id: Optional[str] = None,
    ) -> WebsocketApiResponse[UserDataStreamStopResponse]:
        """
            WebSocket Stop user data stream
            /userDataStream.stop
            https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#stop-user-data-stream-user_stream

            Explicitly stop and close the user data stream.
        This request does not require `signature`.
        Weight: 2

            Args:
                    listen_key (Union[str, None]):
                    id (Optional[str] = None): Unique WebSocket request ID.

            Returns:
                WebsocketApiResponse[UserDataStreamStopResponse]

            Raises:
                RequiredError: If a required parameter is missing.

        """

        if listen_key is None:
            raise RequiredError(
                field="listen_key",
                error_message="Missing required parameter 'listen_key'",
            )

        params = {
            "listen_key": listen_key,
            **({"id": id} if id is not None else {}),
        }

        payload = {
            "method": "/userDataStream.stop".replace("/", "", 1),
            "params": params,
        }

        return await self.websocket_api.send_message(
            payload=payload, response_model=UserDataStreamStopResponse, api_key=True
        )

    async def user_data_stream_subscribe(
        self,
        id: Optional[str] = None,
    ) -> WebsocketApiResponse[UserDataStreamSubscribeResponse]:
        """
            WebSocket Subscribe to User Data Stream
            /userDataStream.subscribe
            https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#subscribe-to-user-data-stream-user_stream

            Subscribe to the User Data Stream in the current WebSocket connection.
        Weight: 2

            Args:
                    id (Optional[str] = None): Unique WebSocket request ID.

            Returns:
                WebsocketApiResponse[UserDataStreamSubscribeResponse]

            Raises:
                RequiredError: If a required parameter is missing.

        """

        params = {
            **({"id": id} if id is not None else {}),
        }

        payload = {
            "method": "/userDataStream.subscribe".replace("/", "", 1),
            "params": params,
        }

        return await self.websocket_api.send_message(
            payload=payload, response_model=UserDataStreamSubscribeResponse
        )

    async def user_data_stream_subscribe_signature(
        self,
        id: Optional[str] = None,
    ) -> WebsocketApiResponse[UserDataStreamSubscribeSignatureResponse]:
        """
            WebSocket Subscribe to User Data Stream through signature subscription
            /userDataStream.subscribe.signature
            https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#subscribe-to-user-data-stream-through-signature-subscription-user_data


        Weight: 2

            Args:
                    id (Optional[str] = None): Unique WebSocket request ID.

            Returns:
                WebsocketApiResponse[UserDataStreamSubscribeSignatureResponse]

            Raises:
                RequiredError: If a required parameter is missing.

        """

        params = {
            **({"id": id} if id is not None else {}),
        }

        payload = {
            "method": "/userDataStream.subscribe.signature".replace("/", "", 1),
            "params": params,
        }

        return await self.websocket_api.send_signed_message(
            payload=payload,
            response_model=UserDataStreamSubscribeSignatureResponse,
            signer=self.signer,
        )

    async def user_data_stream_unsubscribe(
        self,
        id: Optional[str] = None,
        subscription_id: Optional[int] = None,
    ) -> WebsocketApiResponse[UserDataStreamUnsubscribeResponse]:
        """
            WebSocket Unsubscribe from User Data Stream
            /userDataStream.unsubscribe
            https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/user-Data-Stream-requests#unsubscribe-from-user-data-stream

            Stop listening to the User Data Stream in the current WebSocket connection.

        Note that `session.logout` will only close the subscription created with `userdataStream.subscribe` but not subscriptions opened with `userDataStream.subscribe.signature`.
        Weight: 2

            Args:
                    id (Optional[str] = None): Unique WebSocket request ID.
                    subscription_id (Optional[int] = None): When called with no parameter, this will close all subscriptions. <br>When called with the `subscriptionId` parameter, this will attempt to close the subscription with that subscription id, if it exists.

            Returns:
                WebsocketApiResponse[UserDataStreamUnsubscribeResponse]

            Raises:
                RequiredError: If a required parameter is missing.

        """

        params = {
            **({"id": id} if id is not None else {}),
            **(
                {"subscription_id": subscription_id}
                if subscription_id is not None
                else {}
            ),
        }

        payload = {
            "method": "/userDataStream.unsubscribe".replace("/", "", 1),
            "params": params,
        }

        return await self.websocket_api.send_message(
            payload=payload, response_model=UserDataStreamUnsubscribeResponse
        )
