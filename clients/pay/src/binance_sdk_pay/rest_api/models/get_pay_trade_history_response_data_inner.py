# coding: utf-8

"""
Binance Pay REST API

OpenAPI Specification for the Binance Pay REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance_sdk_pay.rest_api.models.get_pay_trade_history_response_data_inner_funds_detail_inner import (
    GetPayTradeHistoryResponseDataInnerFundsDetailInner,
)
from binance_sdk_pay.rest_api.models.get_pay_trade_history_response_data_inner_payer_info import (
    GetPayTradeHistoryResponseDataInnerPayerInfo,
)
from binance_sdk_pay.rest_api.models.get_pay_trade_history_response_data_inner_receiver_info import (
    GetPayTradeHistoryResponseDataInnerReceiverInfo,
)
from typing import Set
from typing_extensions import Self


class GetPayTradeHistoryResponseDataInner(BaseModel):
    """
    GetPayTradeHistoryResponseDataInner
    """  # noqa: E501

    orderType: Optional[StrictStr] = Field(default=None, alias="orderType")
    transactionId: Optional[StrictStr] = Field(default=None, alias="transactionId")
    transactionTime: Optional[StrictInt] = Field(default=None, alias="transactionTime")
    amount: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    walletType: Optional[StrictInt] = Field(default=None, alias="walletType")
    walletTypes: Optional[List[StrictInt]] = Field(default=None, alias="walletTypes")
    fundsDetail: Optional[List[GetPayTradeHistoryResponseDataInnerFundsDetailInner]] = (
        Field(default=None, alias="fundsDetail")
    )
    payerInfo: Optional[GetPayTradeHistoryResponseDataInnerPayerInfo] = Field(
        default=None, alias="payerInfo"
    )
    receiverInfo: Optional[GetPayTradeHistoryResponseDataInnerReceiverInfo] = Field(
        default=None, alias="receiverInfo"
    )
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "orderType",
        "transactionId",
        "transactionTime",
        "amount",
        "currency",
        "walletType",
        "walletTypes",
        "fundsDetail",
        "payerInfo",
        "receiverInfo",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def is_array(cls) -> bool:
        return False

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPayTradeHistoryResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in funds_detail (list)
        _items = []
        if self.funds_detail:
            for _item_funds_detail in self.funds_detail:
                if _item_funds_detail:
                    _items.append(_item_funds_detail.to_dict())
            _dict["fundsDetail"] = _items
        # override the default output from pydantic by calling `to_dict()` of payer_info
        if self.payer_info:
            _dict["payerInfo"] = self.payer_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver_info
        if self.receiver_info:
            _dict["receiverInfo"] = self.receiver_info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPayTradeHistoryResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "orderType": obj.get("orderType"),
                "transactionId": obj.get("transactionId"),
                "transactionTime": obj.get("transactionTime"),
                "amount": obj.get("amount"),
                "currency": obj.get("currency"),
                "walletType": obj.get("walletType"),
                "walletTypes": obj.get("walletTypes"),
                "fundsDetail": (
                    [
                        GetPayTradeHistoryResponseDataInnerFundsDetailInner.from_dict(
                            _item
                        )
                        for _item in obj["fundsDetail"]
                    ]
                    if obj.get("fundsDetail") is not None
                    else None
                ),
                "payerInfo": (
                    GetPayTradeHistoryResponseDataInnerPayerInfo.from_dict(
                        obj["payerInfo"]
                    )
                    if obj.get("payerInfo") is not None
                    else None
                ),
                "receiverInfo": (
                    GetPayTradeHistoryResponseDataInnerReceiverInfo.from_dict(
                        obj["receiverInfo"]
                    )
                    if obj.get("receiverInfo") is not None
                    else None
                ),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
