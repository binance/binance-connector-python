"""
Binance Derivatives Trading Portfolio Margin REST API

OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.utils import normalize_query_values, is_one_of_model, snake_to_camel

from binance_sdk_derivatives_trading_portfolio_margin.rest_api.api import AccountApi
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    AccountBalanceResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    AccountInformationResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    BnbTransferResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    ChangeAutoRepayFuturesStatusResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    ChangeCmInitialLeverageResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    ChangeCmPositionModeResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    ChangeUmInitialLeverageResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    ChangeUmPositionModeResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    CmNotionalAndLeverageBracketsResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    FundAutoCollectionResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    FundCollectionByAssetResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetAutoRepayFuturesStatusResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetCmAccountDetailResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetCmCurrentPositionModeResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetCmIncomeHistoryResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetDownloadIdForUmFuturesOrderHistoryResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetDownloadIdForUmFuturesTradeHistoryResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetDownloadIdForUmFuturesTransactionHistoryResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetMarginBorrowLoanInterestHistoryResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetUmAccountDetailResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetUmAccountDetailV2Response,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetUmCurrentPositionModeResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetUmFuturesOrderDownloadLinkByIdResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetUmFuturesTradeDownloadLinkByIdResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetUmFuturesTransactionDownloadLinkByIdResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetUmIncomeHistoryResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetUserCommissionRateForCmResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    GetUserCommissionRateForUmResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    MarginMaxBorrowResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    PortfolioMarginUmTradingQuantitativeRulesIndicatorsResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    QueryCmPositionInformationResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    QueryMarginLoanRecordResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    QueryMarginMaxWithdrawResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    QueryMarginRepayRecordResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    QueryPortfolioMarginNegativeBalanceInterestHistoryResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    QueryUmPositionInformationResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    QueryUserNegativeBalanceAutoExchangeRecordResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    QueryUserRateLimitResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    RepayFuturesNegativeBalanceResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    UmFuturesAccountConfigurationResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    UmFuturesSymbolConfigurationResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin.rest_api.models import (
    UmNotionalAndLeverageBracketsResponse,
)


class TestAccountApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = AccountApi(configuration=config, session=self.mock_session)

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_account_balance_success(self, mock_get_signature):
        """Test account_balance() successfully with required parameters only."""

        expected_response = [
            {
                "asset": "USDT",
                "totalWalletBalance": "122607.35137903",
                "crossMarginAsset": "92.27530794",
                "crossMarginBorrowed": "10.00000000",
                "crossMarginFree": "100.00000000",
                "crossMarginInterest": "0.72469206",
                "crossMarginLocked": "3.00000000",
                "umWalletBalance": "0.00000000",
                "umUnrealizedPNL": "23.72469206",
                "cmWalletBalance": "23.72469206",
                "cmUnrealizedPNL": "",
                "updateTime": 1617939110373,
                "negativeBalance": "0",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.account_balance()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AccountBalanceResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = AccountBalanceResponse.from_dict(expected_response)
        else:
            expected = AccountBalanceResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_account_balance_success_with_optional_params(self, mock_get_signature):
        """Test account_balance() successfully with optional parameters."""

        params = {"asset": "asset_example", "recv_window": 5000}

        expected_response = [
            {
                "asset": "USDT",
                "totalWalletBalance": "122607.35137903",
                "crossMarginAsset": "92.27530794",
                "crossMarginBorrowed": "10.00000000",
                "crossMarginFree": "100.00000000",
                "crossMarginInterest": "0.72469206",
                "crossMarginLocked": "3.00000000",
                "umWalletBalance": "0.00000000",
                "umUnrealizedPNL": "23.72469206",
                "cmWalletBalance": "23.72469206",
                "cmUnrealizedPNL": "",
                "updateTime": 1617939110373,
                "negativeBalance": "0",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.account_balance(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AccountBalanceResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = AccountBalanceResponse.from_dict(expected_response)
        else:
            expected = AccountBalanceResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_account_balance_server_error(self):
        """Test that account_balance() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.account_balance = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.account_balance()

    @patch("binance_common.utils.get_signature")
    def test_account_information_success(self, mock_get_signature):
        """Test account_information() successfully with required parameters only."""

        expected_response = {
            "uniMMR": "5167.92171923",
            "accountEquity": "122607.35137903",
            "actualEquity": "73.47428058",
            "accountInitialMargin": "23.72469206",
            "accountMaintMargin": "23.72469206",
            "accountStatus": "NORMAL",
            "virtualMaxWithdrawAmount": "1627523.32459208",
            "totalAvailableBalance": "",
            "totalMarginOpenLoss": "",
            "updateTime": 1657707212154,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.account_information()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AccountInformationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = AccountInformationResponse.from_dict(expected_response)
        else:
            expected = AccountInformationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_account_information_success_with_optional_params(self, mock_get_signature):
        """Test account_information() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "uniMMR": "5167.92171923",
            "accountEquity": "122607.35137903",
            "actualEquity": "73.47428058",
            "accountInitialMargin": "23.72469206",
            "accountMaintMargin": "23.72469206",
            "accountStatus": "NORMAL",
            "virtualMaxWithdrawAmount": "1627523.32459208",
            "totalAvailableBalance": "",
            "totalMarginOpenLoss": "",
            "updateTime": 1657707212154,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.account_information(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AccountInformationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = AccountInformationResponse.from_dict(expected_response)
        else:
            expected = AccountInformationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_account_information_server_error(self):
        """Test that account_information() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.account_information = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.account_information()

    @patch("binance_common.utils.get_signature")
    def test_bnb_transfer_success(self, mock_get_signature):
        """Test bnb_transfer() successfully with required parameters only."""

        params = {
            "amount": 1.0,
            "transfer_side": "transfer_side_example",
        }

        expected_response = {"tranId": 100000001}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.bnb_transfer(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/bnb-transfer" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["amount"] == 1.0
        assert normalized["transferSide"] == "transfer_side_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(BnbTransferResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = BnbTransferResponse.from_dict(expected_response)
        else:
            expected = BnbTransferResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_bnb_transfer_success_with_optional_params(self, mock_get_signature):
        """Test bnb_transfer() successfully with optional parameters."""

        params = {
            "amount": 1.0,
            "transfer_side": "transfer_side_example",
            "recv_window": 5000,
        }

        expected_response = {"tranId": 100000001}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.bnb_transfer(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/bnb-transfer" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(BnbTransferResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = BnbTransferResponse.from_dict(expected_response)
        else:
            expected = BnbTransferResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_bnb_transfer_missing_required_param_amount(self):
        """Test that bnb_transfer() raises RequiredError when 'amount' is missing."""
        params = {
            "amount": 1.0,
            "transfer_side": "transfer_side_example",
        }
        params["amount"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.bnb_transfer(**params)

    def test_bnb_transfer_missing_required_param_transfer_side(self):
        """Test that bnb_transfer() raises RequiredError when 'transfer_side' is missing."""
        params = {
            "amount": 1.0,
            "transfer_side": "transfer_side_example",
        }
        params["transfer_side"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'transfer_side'"
        ):
            self.client.bnb_transfer(**params)

    def test_bnb_transfer_server_error(self):
        """Test that bnb_transfer() raises an error when the server returns an error."""

        params = {
            "amount": 1.0,
            "transfer_side": "transfer_side_example",
        }

        mock_error = Exception("ResponseError")
        self.client.bnb_transfer = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.bnb_transfer(**params)

    @patch("binance_common.utils.get_signature")
    def test_change_auto_repay_futures_status_success(self, mock_get_signature):
        """Test change_auto_repay_futures_status() successfully with required parameters only."""

        params = {
            "auto_repay": "True",
        }

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_auto_repay_futures_status(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/repay-futures-switch" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["autoRepay"] == "True"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeAutoRepayFuturesStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ChangeAutoRepayFuturesStatusResponse.from_dict(expected_response)
        else:
            expected = ChangeAutoRepayFuturesStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_change_auto_repay_futures_status_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test change_auto_repay_futures_status() successfully with optional parameters."""

        params = {"auto_repay": "True", "recv_window": 5000}

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_auto_repay_futures_status(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/repay-futures-switch" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeAutoRepayFuturesStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ChangeAutoRepayFuturesStatusResponse.from_dict(expected_response)
        else:
            expected = ChangeAutoRepayFuturesStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_change_auto_repay_futures_status_missing_required_param_auto_repay(self):
        """Test that change_auto_repay_futures_status() raises RequiredError when 'auto_repay' is missing."""
        params = {
            "auto_repay": "True",
        }
        params["auto_repay"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'auto_repay'"
        ):
            self.client.change_auto_repay_futures_status(**params)

    def test_change_auto_repay_futures_status_server_error(self):
        """Test that change_auto_repay_futures_status() raises an error when the server returns an error."""

        params = {
            "auto_repay": "True",
        }

        mock_error = Exception("ResponseError")
        self.client.change_auto_repay_futures_status = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.change_auto_repay_futures_status(**params)

    @patch("binance_common.utils.get_signature")
    def test_change_cm_initial_leverage_success(self, mock_get_signature):
        """Test change_cm_initial_leverage() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
            "leverage": 56,
        }

        expected_response = {
            "leverage": 21,
            "maxQty": "1000",
            "symbol": "BTCUSD_200925",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_cm_initial_leverage(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/leverage" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["symbol"] == "symbol_example"
        assert normalized["leverage"] == 56

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeCmInitialLeverageResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ChangeCmInitialLeverageResponse.from_dict(expected_response)
        else:
            expected = ChangeCmInitialLeverageResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_change_cm_initial_leverage_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test change_cm_initial_leverage() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "leverage": 56, "recv_window": 5000}

        expected_response = {
            "leverage": 21,
            "maxQty": "1000",
            "symbol": "BTCUSD_200925",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_cm_initial_leverage(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/leverage" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeCmInitialLeverageResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ChangeCmInitialLeverageResponse.from_dict(expected_response)
        else:
            expected = ChangeCmInitialLeverageResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_change_cm_initial_leverage_missing_required_param_symbol(self):
        """Test that change_cm_initial_leverage() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
            "leverage": 56,
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.change_cm_initial_leverage(**params)

    def test_change_cm_initial_leverage_missing_required_param_leverage(self):
        """Test that change_cm_initial_leverage() raises RequiredError when 'leverage' is missing."""
        params = {
            "symbol": "symbol_example",
            "leverage": 56,
        }
        params["leverage"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'leverage'"
        ):
            self.client.change_cm_initial_leverage(**params)

    def test_change_cm_initial_leverage_server_error(self):
        """Test that change_cm_initial_leverage() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
            "leverage": 56,
        }

        mock_error = Exception("ResponseError")
        self.client.change_cm_initial_leverage = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.change_cm_initial_leverage(**params)

    @patch("binance_common.utils.get_signature")
    def test_change_cm_position_mode_success(self, mock_get_signature):
        """Test change_cm_position_mode() successfully with required parameters only."""

        params = {
            "dual_side_position": "dual_side_position_example",
        }

        expected_response = {"code": 200, "msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_cm_position_mode(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/positionSide/dual" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["dualSidePosition"] == "dual_side_position_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeCmPositionModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ChangeCmPositionModeResponse.from_dict(expected_response)
        else:
            expected = ChangeCmPositionModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_change_cm_position_mode_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test change_cm_position_mode() successfully with optional parameters."""

        params = {
            "dual_side_position": "dual_side_position_example",
            "recv_window": 5000,
        }

        expected_response = {"code": 200, "msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_cm_position_mode(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/positionSide/dual" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeCmPositionModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ChangeCmPositionModeResponse.from_dict(expected_response)
        else:
            expected = ChangeCmPositionModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_change_cm_position_mode_missing_required_param_dual_side_position(self):
        """Test that change_cm_position_mode() raises RequiredError when 'dual_side_position' is missing."""
        params = {
            "dual_side_position": "dual_side_position_example",
        }
        params["dual_side_position"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'dual_side_position'"
        ):
            self.client.change_cm_position_mode(**params)

    def test_change_cm_position_mode_server_error(self):
        """Test that change_cm_position_mode() raises an error when the server returns an error."""

        params = {
            "dual_side_position": "dual_side_position_example",
        }

        mock_error = Exception("ResponseError")
        self.client.change_cm_position_mode = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.change_cm_position_mode(**params)

    @patch("binance_common.utils.get_signature")
    def test_change_um_initial_leverage_success(self, mock_get_signature):
        """Test change_um_initial_leverage() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
            "leverage": 56,
        }

        expected_response = {
            "leverage": 21,
            "maxNotionalValue": "1000000",
            "symbol": "BTCUSDT",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_um_initial_leverage(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/leverage" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["symbol"] == "symbol_example"
        assert normalized["leverage"] == 56

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeUmInitialLeverageResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ChangeUmInitialLeverageResponse.from_dict(expected_response)
        else:
            expected = ChangeUmInitialLeverageResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_change_um_initial_leverage_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test change_um_initial_leverage() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "leverage": 56, "recv_window": 5000}

        expected_response = {
            "leverage": 21,
            "maxNotionalValue": "1000000",
            "symbol": "BTCUSDT",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_um_initial_leverage(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/leverage" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeUmInitialLeverageResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ChangeUmInitialLeverageResponse.from_dict(expected_response)
        else:
            expected = ChangeUmInitialLeverageResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_change_um_initial_leverage_missing_required_param_symbol(self):
        """Test that change_um_initial_leverage() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
            "leverage": 56,
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.change_um_initial_leverage(**params)

    def test_change_um_initial_leverage_missing_required_param_leverage(self):
        """Test that change_um_initial_leverage() raises RequiredError when 'leverage' is missing."""
        params = {
            "symbol": "symbol_example",
            "leverage": 56,
        }
        params["leverage"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'leverage'"
        ):
            self.client.change_um_initial_leverage(**params)

    def test_change_um_initial_leverage_server_error(self):
        """Test that change_um_initial_leverage() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
            "leverage": 56,
        }

        mock_error = Exception("ResponseError")
        self.client.change_um_initial_leverage = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.change_um_initial_leverage(**params)

    @patch("binance_common.utils.get_signature")
    def test_change_um_position_mode_success(self, mock_get_signature):
        """Test change_um_position_mode() successfully with required parameters only."""

        params = {
            "dual_side_position": "dual_side_position_example",
        }

        expected_response = {"code": 200, "msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_um_position_mode(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/positionSide/dual" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["dualSidePosition"] == "dual_side_position_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeUmPositionModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ChangeUmPositionModeResponse.from_dict(expected_response)
        else:
            expected = ChangeUmPositionModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_change_um_position_mode_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test change_um_position_mode() successfully with optional parameters."""

        params = {
            "dual_side_position": "dual_side_position_example",
            "recv_window": 5000,
        }

        expected_response = {"code": 200, "msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_um_position_mode(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/positionSide/dual" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeUmPositionModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = ChangeUmPositionModeResponse.from_dict(expected_response)
        else:
            expected = ChangeUmPositionModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_change_um_position_mode_missing_required_param_dual_side_position(self):
        """Test that change_um_position_mode() raises RequiredError when 'dual_side_position' is missing."""
        params = {
            "dual_side_position": "dual_side_position_example",
        }
        params["dual_side_position"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'dual_side_position'"
        ):
            self.client.change_um_position_mode(**params)

    def test_change_um_position_mode_server_error(self):
        """Test that change_um_position_mode() raises an error when the server returns an error."""

        params = {
            "dual_side_position": "dual_side_position_example",
        }

        mock_error = Exception("ResponseError")
        self.client.change_um_position_mode = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.change_um_position_mode(**params)

    @patch("binance_common.utils.get_signature")
    def test_cm_notional_and_leverage_brackets_success(self, mock_get_signature):
        """Test cm_notional_and_leverage_brackets() successfully with required parameters only."""

        expected_response = [
            {
                "symbol": "BTCUSD_PERP",
                "brackets": [
                    {
                        "bracket": 1,
                        "initialLeverage": 125,
                        "qtyCap": 50,
                        "qtyFloor": 0,
                        "maintMarginRatio": 0.004,
                        "cum": 0,
                    }
                ],
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.cm_notional_and_leverage_brackets()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/leverageBracket" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(CmNotionalAndLeverageBracketsResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = CmNotionalAndLeverageBracketsResponse.from_dict(
                expected_response
            )
        else:
            expected = CmNotionalAndLeverageBracketsResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_cm_notional_and_leverage_brackets_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test cm_notional_and_leverage_brackets() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = [
            {
                "symbol": "BTCUSD_PERP",
                "brackets": [
                    {
                        "bracket": 1,
                        "initialLeverage": 125,
                        "qtyCap": 50,
                        "qtyFloor": 0,
                        "maintMarginRatio": 0.004,
                        "cum": 0,
                    }
                ],
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.cm_notional_and_leverage_brackets(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/leverageBracket" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(CmNotionalAndLeverageBracketsResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = CmNotionalAndLeverageBracketsResponse.from_dict(
                expected_response
            )
        else:
            expected = CmNotionalAndLeverageBracketsResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_cm_notional_and_leverage_brackets_server_error(self):
        """Test that cm_notional_and_leverage_brackets() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.cm_notional_and_leverage_brackets = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.cm_notional_and_leverage_brackets()

    @patch("binance_common.utils.get_signature")
    def test_fund_auto_collection_success(self, mock_get_signature):
        """Test fund_auto_collection() successfully with required parameters only."""

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.fund_auto_collection()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/auto-collection" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FundAutoCollectionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FundAutoCollectionResponse.from_dict(expected_response)
        else:
            expected = FundAutoCollectionResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_fund_auto_collection_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test fund_auto_collection() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.fund_auto_collection(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/auto-collection" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FundAutoCollectionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FundAutoCollectionResponse.from_dict(expected_response)
        else:
            expected = FundAutoCollectionResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_fund_auto_collection_server_error(self):
        """Test that fund_auto_collection() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.fund_auto_collection = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.fund_auto_collection()

    @patch("binance_common.utils.get_signature")
    def test_fund_collection_by_asset_success(self, mock_get_signature):
        """Test fund_collection_by_asset() successfully with required parameters only."""

        params = {
            "asset": "asset_example",
        }

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.fund_collection_by_asset(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/asset-collection" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["asset"] == "asset_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FundCollectionByAssetResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FundCollectionByAssetResponse.from_dict(expected_response)
        else:
            expected = FundCollectionByAssetResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_fund_collection_by_asset_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test fund_collection_by_asset() successfully with optional parameters."""

        params = {"asset": "asset_example", "recv_window": 5000}

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.fund_collection_by_asset(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/asset-collection" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FundCollectionByAssetResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = FundCollectionByAssetResponse.from_dict(expected_response)
        else:
            expected = FundCollectionByAssetResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_fund_collection_by_asset_missing_required_param_asset(self):
        """Test that fund_collection_by_asset() raises RequiredError when 'asset' is missing."""
        params = {
            "asset": "asset_example",
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.fund_collection_by_asset(**params)

    def test_fund_collection_by_asset_server_error(self):
        """Test that fund_collection_by_asset() raises an error when the server returns an error."""

        params = {
            "asset": "asset_example",
        }

        mock_error = Exception("ResponseError")
        self.client.fund_collection_by_asset = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.fund_collection_by_asset(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_auto_repay_futures_status_success(self, mock_get_signature):
        """Test get_auto_repay_futures_status() successfully with required parameters only."""

        expected_response = {"autoRepay": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_auto_repay_futures_status()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/repay-futures-switch" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetAutoRepayFuturesStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetAutoRepayFuturesStatusResponse.from_dict(expected_response)
        else:
            expected = GetAutoRepayFuturesStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_auto_repay_futures_status_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_auto_repay_futures_status() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"autoRepay": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_auto_repay_futures_status(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/repay-futures-switch" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetAutoRepayFuturesStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetAutoRepayFuturesStatusResponse.from_dict(expected_response)
        else:
            expected = GetAutoRepayFuturesStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_auto_repay_futures_status_server_error(self):
        """Test that get_auto_repay_futures_status() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_auto_repay_futures_status = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_auto_repay_futures_status()

    @patch("binance_common.utils.get_signature")
    def test_get_cm_account_detail_success(self, mock_get_signature):
        """Test get_cm_account_detail() successfully with required parameters only."""

        expected_response = {
            "assets": [
                {
                    "asset": "BTC",
                    "crossWalletBalance": "0.00241969",
                    "crossUnPnl": "0.00000000",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "updateTime": 1625474304765,
                }
            ],
            "positions": [
                {
                    "symbol": "BTCUSD_201225",
                    "positionAmt": "0",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "unrealizedProfit": "0.00000000",
                    "positionInitialMargin": "0",
                    "openOrderInitialMargin": "0",
                    "leverage": "125",
                    "positionSide": "BOTH",
                    "entryPrice": "0.0",
                    "maxQty": "50",
                    "updateTime": 0,
                }
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_cm_account_detail()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCmAccountDetailResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCmAccountDetailResponse.from_dict(expected_response)
        else:
            expected = GetCmAccountDetailResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_cm_account_detail_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_cm_account_detail() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "assets": [
                {
                    "asset": "BTC",
                    "crossWalletBalance": "0.00241969",
                    "crossUnPnl": "0.00000000",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "updateTime": 1625474304765,
                }
            ],
            "positions": [
                {
                    "symbol": "BTCUSD_201225",
                    "positionAmt": "0",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "unrealizedProfit": "0.00000000",
                    "positionInitialMargin": "0",
                    "openOrderInitialMargin": "0",
                    "leverage": "125",
                    "positionSide": "BOTH",
                    "entryPrice": "0.0",
                    "maxQty": "50",
                    "updateTime": 0,
                }
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_cm_account_detail(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCmAccountDetailResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCmAccountDetailResponse.from_dict(expected_response)
        else:
            expected = GetCmAccountDetailResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_cm_account_detail_server_error(self):
        """Test that get_cm_account_detail() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_cm_account_detail = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_cm_account_detail()

    @patch("binance_common.utils.get_signature")
    def test_get_cm_current_position_mode_success(self, mock_get_signature):
        """Test get_cm_current_position_mode() successfully with required parameters only."""

        expected_response = {"dualSidePosition": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_cm_current_position_mode()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/positionSide/dual" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCmCurrentPositionModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCmCurrentPositionModeResponse.from_dict(expected_response)
        else:
            expected = GetCmCurrentPositionModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_cm_current_position_mode_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_cm_current_position_mode() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"dualSidePosition": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_cm_current_position_mode(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/positionSide/dual" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCmCurrentPositionModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCmCurrentPositionModeResponse.from_dict(expected_response)
        else:
            expected = GetCmCurrentPositionModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_cm_current_position_mode_server_error(self):
        """Test that get_cm_current_position_mode() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_cm_current_position_mode = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_cm_current_position_mode()

    @patch("binance_common.utils.get_signature")
    def test_get_cm_income_history_success(self, mock_get_signature):
        """Test get_cm_income_history() successfully with required parameters only."""

        expected_response = [
            {
                "symbol": "",
                "incomeType": "TRANSFER",
                "income": "-0.37500000",
                "asset": "BTC",
                "info": "WITHDRAW",
                "time": 1570608000000,
                "tranId": "9689322392",
                "tradeId": "",
            },
            {
                "symbol": "BTCUSD_200925",
                "incomeType": "COMMISSION",
                "income": "-0.01000000",
                "asset": "BTC",
                "info": "",
                "time": 1570636800000,
                "tranId": "9689322392",
                "tradeId": "2059192",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_cm_income_history()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/income" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCmIncomeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCmIncomeHistoryResponse.from_dict(expected_response)
        else:
            expected = GetCmIncomeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_cm_income_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_cm_income_history() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "income_type": "income_type_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "page": 56,
            "limit": 100,
            "recv_window": 5000,
        }

        expected_response = [
            {
                "symbol": "",
                "incomeType": "TRANSFER",
                "income": "-0.37500000",
                "asset": "BTC",
                "info": "WITHDRAW",
                "time": 1570608000000,
                "tranId": "9689322392",
                "tradeId": "",
            },
            {
                "symbol": "BTCUSD_200925",
                "incomeType": "COMMISSION",
                "income": "-0.01000000",
                "asset": "BTC",
                "info": "",
                "time": 1570636800000,
                "tranId": "9689322392",
                "tradeId": "2059192",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_cm_income_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/income" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCmIncomeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCmIncomeHistoryResponse.from_dict(expected_response)
        else:
            expected = GetCmIncomeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_cm_income_history_server_error(self):
        """Test that get_cm_income_history() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_cm_income_history = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_cm_income_history()

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_um_futures_order_history_success(
        self, mock_get_signature
    ):
        """Test get_download_id_for_um_futures_order_history() successfully with required parameters only."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_um_futures_order_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/order/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["startTime"] == 1623319461670
        assert normalized["endTime"] == 1641782889000

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForUmFuturesOrderHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForUmFuturesOrderHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetDownloadIdForUmFuturesOrderHistoryResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_um_futures_order_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_download_id_for_um_futures_order_history() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "recv_window": 5000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_um_futures_order_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/order/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForUmFuturesOrderHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForUmFuturesOrderHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetDownloadIdForUmFuturesOrderHistoryResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_download_id_for_um_futures_order_history_missing_required_param_start_time(
        self,
    ):
        """Test that get_download_id_for_um_futures_order_history() raises RequiredError when 'start_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["start_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'start_time'"
        ):
            self.client.get_download_id_for_um_futures_order_history(**params)

    def test_get_download_id_for_um_futures_order_history_missing_required_param_end_time(
        self,
    ):
        """Test that get_download_id_for_um_futures_order_history() raises RequiredError when 'end_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["end_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'end_time'"
        ):
            self.client.get_download_id_for_um_futures_order_history(**params)

    def test_get_download_id_for_um_futures_order_history_server_error(self):
        """Test that get_download_id_for_um_futures_order_history() raises an error when the server returns an error."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        mock_error = Exception("ResponseError")
        self.client.get_download_id_for_um_futures_order_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_download_id_for_um_futures_order_history(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_um_futures_trade_history_success(
        self, mock_get_signature
    ):
        """Test get_download_id_for_um_futures_trade_history() successfully with required parameters only."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_um_futures_trade_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/trade/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["startTime"] == 1623319461670
        assert normalized["endTime"] == 1641782889000

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForUmFuturesTradeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForUmFuturesTradeHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetDownloadIdForUmFuturesTradeHistoryResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_um_futures_trade_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_download_id_for_um_futures_trade_history() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "recv_window": 5000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_um_futures_trade_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/trade/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForUmFuturesTradeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForUmFuturesTradeHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetDownloadIdForUmFuturesTradeHistoryResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_download_id_for_um_futures_trade_history_missing_required_param_start_time(
        self,
    ):
        """Test that get_download_id_for_um_futures_trade_history() raises RequiredError when 'start_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["start_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'start_time'"
        ):
            self.client.get_download_id_for_um_futures_trade_history(**params)

    def test_get_download_id_for_um_futures_trade_history_missing_required_param_end_time(
        self,
    ):
        """Test that get_download_id_for_um_futures_trade_history() raises RequiredError when 'end_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["end_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'end_time'"
        ):
            self.client.get_download_id_for_um_futures_trade_history(**params)

    def test_get_download_id_for_um_futures_trade_history_server_error(self):
        """Test that get_download_id_for_um_futures_trade_history() raises an error when the server returns an error."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        mock_error = Exception("ResponseError")
        self.client.get_download_id_for_um_futures_trade_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_download_id_for_um_futures_trade_history(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_um_futures_transaction_history_success(
        self, mock_get_signature
    ):
        """Test get_download_id_for_um_futures_transaction_history() successfully with required parameters only."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_um_futures_transaction_history(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/income/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["startTime"] == 1623319461670
        assert normalized["endTime"] == 1641782889000

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForUmFuturesTransactionHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForUmFuturesTransactionHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetDownloadIdForUmFuturesTransactionHistoryResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_download_id_for_um_futures_transaction_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_download_id_for_um_futures_transaction_history() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "recv_window": 5000,
        }

        expected_response = {
            "avgCostTimestampOfLast30d": 7241837,
            "downloadId": "546975389218332672",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_download_id_for_um_futures_transaction_history(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/income/asyn" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetDownloadIdForUmFuturesTransactionHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetDownloadIdForUmFuturesTransactionHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetDownloadIdForUmFuturesTransactionHistoryResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_download_id_for_um_futures_transaction_history_missing_required_param_start_time(
        self,
    ):
        """Test that get_download_id_for_um_futures_transaction_history() raises RequiredError when 'start_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["start_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'start_time'"
        ):
            self.client.get_download_id_for_um_futures_transaction_history(**params)

    def test_get_download_id_for_um_futures_transaction_history_missing_required_param_end_time(
        self,
    ):
        """Test that get_download_id_for_um_futures_transaction_history() raises RequiredError when 'end_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["end_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'end_time'"
        ):
            self.client.get_download_id_for_um_futures_transaction_history(**params)

    def test_get_download_id_for_um_futures_transaction_history_server_error(self):
        """Test that get_download_id_for_um_futures_transaction_history() raises an error when the server returns an error."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        mock_error = Exception("ResponseError")
        self.client.get_download_id_for_um_futures_transaction_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_download_id_for_um_futures_transaction_history(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_margin_borrow_loan_interest_history_success(self, mock_get_signature):
        """Test get_margin_borrow_loan_interest_history() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "txId": 1352286576452864800,
                    "interestAccuredTime": 1672160400000,
                    "asset": "USDT",
                    "rawAsset": "USDT",
                    "principal": "45.3313",
                    "interest": "0.00024995",
                    "interestRate": "0.00013233",
                    "type": "ON_BORROW",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_margin_borrow_loan_interest_history()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/margin/marginInterestHistory" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetMarginBorrowLoanInterestHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetMarginBorrowLoanInterestHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = GetMarginBorrowLoanInterestHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_margin_borrow_loan_interest_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_margin_borrow_loan_interest_history() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "archived": "",
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "txId": 1352286576452864800,
                    "interestAccuredTime": 1672160400000,
                    "asset": "USDT",
                    "rawAsset": "USDT",
                    "principal": "45.3313",
                    "interest": "0.00024995",
                    "interestRate": "0.00013233",
                    "type": "ON_BORROW",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_margin_borrow_loan_interest_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/margin/marginInterestHistory" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetMarginBorrowLoanInterestHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetMarginBorrowLoanInterestHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = GetMarginBorrowLoanInterestHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_margin_borrow_loan_interest_history_server_error(self):
        """Test that get_margin_borrow_loan_interest_history() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_margin_borrow_loan_interest_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_margin_borrow_loan_interest_history()

    @patch("binance_common.utils.get_signature")
    def test_get_um_account_detail_success(self, mock_get_signature):
        """Test get_um_account_detail() successfully with required parameters only."""

        expected_response = {
            "assets": [
                {
                    "asset": "USDT",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "updateTime": 1625474304765,
                }
            ],
            "positions": [
                {
                    "symbol": "BTCUSDT",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "unrealizedProfit": "0.00000000",
                    "positionInitialMargin": "0",
                    "openOrderInitialMargin": "0",
                    "leverage": "100",
                    "entryPrice": "0.00000",
                    "maxNotional": "250000",
                    "bidNotional": "0",
                    "askNotional": "0",
                    "positionSide": "BOTH",
                    "positionAmt": "0",
                    "updateTime": 0,
                }
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_account_detail()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmAccountDetailResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmAccountDetailResponse.from_dict(expected_response)
        else:
            expected = GetUmAccountDetailResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_um_account_detail_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_um_account_detail() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "assets": [
                {
                    "asset": "USDT",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "updateTime": 1625474304765,
                }
            ],
            "positions": [
                {
                    "symbol": "BTCUSDT",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "unrealizedProfit": "0.00000000",
                    "positionInitialMargin": "0",
                    "openOrderInitialMargin": "0",
                    "leverage": "100",
                    "entryPrice": "0.00000",
                    "maxNotional": "250000",
                    "bidNotional": "0",
                    "askNotional": "0",
                    "positionSide": "BOTH",
                    "positionAmt": "0",
                    "updateTime": 0,
                }
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_account_detail(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmAccountDetailResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmAccountDetailResponse.from_dict(expected_response)
        else:
            expected = GetUmAccountDetailResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_um_account_detail_server_error(self):
        """Test that get_um_account_detail() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_um_account_detail = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_um_account_detail()

    @patch("binance_common.utils.get_signature")
    def test_get_um_account_detail_v2_success(self, mock_get_signature):
        """Test get_um_account_detail_v2() successfully with required parameters only."""

        expected_response = {
            "assets": [
                {
                    "asset": "USDT",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "updateTime": 1625474304765,
                }
            ],
            "positions": [
                {
                    "symbol": "BTCUSDT",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "unrealizedProfit": "0.00000000",
                    "positionSide": "BOTH",
                    "positionAmt": "0",
                    "updateTime": 0,
                    "notional": "86.98650000",
                }
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_account_detail_v2()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v2/um/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmAccountDetailV2Response)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmAccountDetailV2Response.from_dict(expected_response)
        else:
            expected = GetUmAccountDetailV2Response.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_um_account_detail_v2_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_um_account_detail_v2() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "assets": [
                {
                    "asset": "USDT",
                    "crossWalletBalance": "23.72469206",
                    "crossUnPnl": "0.00000000",
                    "maintMargin": "0.00000000",
                    "initialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "openOrderInitialMargin": "0.00000000",
                    "updateTime": 1625474304765,
                }
            ],
            "positions": [
                {
                    "symbol": "BTCUSDT",
                    "initialMargin": "0",
                    "maintMargin": "0",
                    "unrealizedProfit": "0.00000000",
                    "positionSide": "BOTH",
                    "positionAmt": "0",
                    "updateTime": 0,
                    "notional": "86.98650000",
                }
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_account_detail_v2(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v2/um/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmAccountDetailV2Response)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmAccountDetailV2Response.from_dict(expected_response)
        else:
            expected = GetUmAccountDetailV2Response.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_um_account_detail_v2_server_error(self):
        """Test that get_um_account_detail_v2() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_um_account_detail_v2 = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_um_account_detail_v2()

    @patch("binance_common.utils.get_signature")
    def test_get_um_current_position_mode_success(self, mock_get_signature):
        """Test get_um_current_position_mode() successfully with required parameters only."""

        expected_response = {"dualSidePosition": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_current_position_mode()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/positionSide/dual" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmCurrentPositionModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmCurrentPositionModeResponse.from_dict(expected_response)
        else:
            expected = GetUmCurrentPositionModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_um_current_position_mode_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_um_current_position_mode() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"dualSidePosition": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_current_position_mode(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/positionSide/dual" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmCurrentPositionModeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmCurrentPositionModeResponse.from_dict(expected_response)
        else:
            expected = GetUmCurrentPositionModeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_um_current_position_mode_server_error(self):
        """Test that get_um_current_position_mode() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_um_current_position_mode = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_um_current_position_mode()

    @patch("binance_common.utils.get_signature")
    def test_get_um_futures_order_download_link_by_id_success(self, mock_get_signature):
        """Test get_um_futures_order_download_link_by_id() successfully with required parameters only."""

        params = {
            "download_id": "1",
        }

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "s3Link": None,
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_futures_order_download_link_by_id(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/order/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["downloadId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmFuturesOrderDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmFuturesOrderDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = GetUmFuturesOrderDownloadLinkByIdResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_um_futures_order_download_link_by_id_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_um_futures_order_download_link_by_id() successfully with optional parameters."""

        params = {"download_id": "1", "recv_window": 5000}

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "s3Link": None,
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_futures_order_download_link_by_id(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/order/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmFuturesOrderDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmFuturesOrderDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = GetUmFuturesOrderDownloadLinkByIdResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_um_futures_order_download_link_by_id_missing_required_param_download_id(
        self,
    ):
        """Test that get_um_futures_order_download_link_by_id() raises RequiredError when 'download_id' is missing."""
        params = {
            "download_id": "1",
        }
        params["download_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'download_id'"
        ):
            self.client.get_um_futures_order_download_link_by_id(**params)

    def test_get_um_futures_order_download_link_by_id_server_error(self):
        """Test that get_um_futures_order_download_link_by_id() raises an error when the server returns an error."""

        params = {
            "download_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.get_um_futures_order_download_link_by_id = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_um_futures_order_download_link_by_id(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_um_futures_trade_download_link_by_id_success(self, mock_get_signature):
        """Test get_um_futures_trade_download_link_by_id() successfully with required parameters only."""

        params = {
            "download_id": "1",
        }

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "s3Link": None,
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_futures_trade_download_link_by_id(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/trade/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["downloadId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmFuturesTradeDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmFuturesTradeDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = GetUmFuturesTradeDownloadLinkByIdResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_um_futures_trade_download_link_by_id_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_um_futures_trade_download_link_by_id() successfully with optional parameters."""

        params = {"download_id": "1", "recv_window": 5000}

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "s3Link": None,
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_futures_trade_download_link_by_id(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/trade/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmFuturesTradeDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmFuturesTradeDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = GetUmFuturesTradeDownloadLinkByIdResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_um_futures_trade_download_link_by_id_missing_required_param_download_id(
        self,
    ):
        """Test that get_um_futures_trade_download_link_by_id() raises RequiredError when 'download_id' is missing."""
        params = {
            "download_id": "1",
        }
        params["download_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'download_id'"
        ):
            self.client.get_um_futures_trade_download_link_by_id(**params)

    def test_get_um_futures_trade_download_link_by_id_server_error(self):
        """Test that get_um_futures_trade_download_link_by_id() raises an error when the server returns an error."""

        params = {
            "download_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.get_um_futures_trade_download_link_by_id = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_um_futures_trade_download_link_by_id(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_um_futures_transaction_download_link_by_id_success(
        self, mock_get_signature
    ):
        """Test get_um_futures_transaction_download_link_by_id() successfully with required parameters only."""

        params = {
            "download_id": "1",
        }

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "s3Link": None,
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_futures_transaction_download_link_by_id(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/income/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["downloadId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmFuturesTransactionDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmFuturesTransactionDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetUmFuturesTransactionDownloadLinkByIdResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_um_futures_transaction_download_link_by_id_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_um_futures_transaction_download_link_by_id() successfully with optional parameters."""

        params = {"download_id": "1", "recv_window": 5000}

        expected_response = {
            "downloadId": "545923594199212032",
            "status": "processing",
            "url": "",
            "s3Link": None,
            "notified": False,
            "expirationTimestamp": -1,
            "isExpired": None,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_futures_transaction_download_link_by_id(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/income/asyn/id" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmFuturesTransactionDownloadLinkByIdResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmFuturesTransactionDownloadLinkByIdResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetUmFuturesTransactionDownloadLinkByIdResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_um_futures_transaction_download_link_by_id_missing_required_param_download_id(
        self,
    ):
        """Test that get_um_futures_transaction_download_link_by_id() raises RequiredError when 'download_id' is missing."""
        params = {
            "download_id": "1",
        }
        params["download_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'download_id'"
        ):
            self.client.get_um_futures_transaction_download_link_by_id(**params)

    def test_get_um_futures_transaction_download_link_by_id_server_error(self):
        """Test that get_um_futures_transaction_download_link_by_id() raises an error when the server returns an error."""

        params = {
            "download_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.get_um_futures_transaction_download_link_by_id = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_um_futures_transaction_download_link_by_id(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_um_income_history_success(self, mock_get_signature):
        """Test get_um_income_history() successfully with required parameters only."""

        expected_response = [
            {
                "symbol": "",
                "incomeType": "TRANSFER",
                "income": "-0.37500000",
                "asset": "USDT",
                "info": "TRANSFER",
                "time": 1570608000000,
                "tranId": "9689322392",
                "tradeId": "",
            },
            {
                "symbol": "BTCUSDT",
                "incomeType": "COMMISSION",
                "income": "-0.01000000",
                "asset": "USDT",
                "info": "COMMISSION",
                "time": 1570636800000,
                "tranId": "9689322392",
                "tradeId": "2059192",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_income_history()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/income" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmIncomeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmIncomeHistoryResponse.from_dict(expected_response)
        else:
            expected = GetUmIncomeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_um_income_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_um_income_history() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "income_type": "income_type_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "page": 56,
            "limit": 100,
            "recv_window": 5000,
        }

        expected_response = [
            {
                "symbol": "",
                "incomeType": "TRANSFER",
                "income": "-0.37500000",
                "asset": "USDT",
                "info": "TRANSFER",
                "time": 1570608000000,
                "tranId": "9689322392",
                "tradeId": "",
            },
            {
                "symbol": "BTCUSDT",
                "incomeType": "COMMISSION",
                "income": "-0.01000000",
                "asset": "USDT",
                "info": "COMMISSION",
                "time": 1570636800000,
                "tranId": "9689322392",
                "tradeId": "2059192",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_um_income_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/income" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUmIncomeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUmIncomeHistoryResponse.from_dict(expected_response)
        else:
            expected = GetUmIncomeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_um_income_history_server_error(self):
        """Test that get_um_income_history() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_um_income_history = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_um_income_history()

    @patch("binance_common.utils.get_signature")
    def test_get_user_commission_rate_for_cm_success(self, mock_get_signature):
        """Test get_user_commission_rate_for_cm() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
        }

        expected_response = {
            "symbol": "BTCUSD_PERP",
            "makerCommissionRate": "0.00015",
            "takerCommissionRate": "0.00040",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_user_commission_rate_for_cm(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/commissionRate" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["symbol"] == "symbol_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUserCommissionRateForCmResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUserCommissionRateForCmResponse.from_dict(expected_response)
        else:
            expected = GetUserCommissionRateForCmResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_user_commission_rate_for_cm_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_user_commission_rate_for_cm() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = {
            "symbol": "BTCUSD_PERP",
            "makerCommissionRate": "0.00015",
            "takerCommissionRate": "0.00040",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_user_commission_rate_for_cm(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/commissionRate" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUserCommissionRateForCmResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUserCommissionRateForCmResponse.from_dict(expected_response)
        else:
            expected = GetUserCommissionRateForCmResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_user_commission_rate_for_cm_missing_required_param_symbol(self):
        """Test that get_user_commission_rate_for_cm() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.get_user_commission_rate_for_cm(**params)

    def test_get_user_commission_rate_for_cm_server_error(self):
        """Test that get_user_commission_rate_for_cm() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
        }

        mock_error = Exception("ResponseError")
        self.client.get_user_commission_rate_for_cm = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_user_commission_rate_for_cm(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_user_commission_rate_for_um_success(self, mock_get_signature):
        """Test get_user_commission_rate_for_um() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
        }

        expected_response = {
            "symbol": "BTCUSDT",
            "makerCommissionRate": "0.0002",
            "takerCommissionRate": "0.0004",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_user_commission_rate_for_um(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/commissionRate" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["symbol"] == "symbol_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUserCommissionRateForUmResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUserCommissionRateForUmResponse.from_dict(expected_response)
        else:
            expected = GetUserCommissionRateForUmResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_user_commission_rate_for_um_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_user_commission_rate_for_um() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = {
            "symbol": "BTCUSDT",
            "makerCommissionRate": "0.0002",
            "takerCommissionRate": "0.0004",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_user_commission_rate_for_um(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/commissionRate" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetUserCommissionRateForUmResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetUserCommissionRateForUmResponse.from_dict(expected_response)
        else:
            expected = GetUserCommissionRateForUmResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_user_commission_rate_for_um_missing_required_param_symbol(self):
        """Test that get_user_commission_rate_for_um() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.get_user_commission_rate_for_um(**params)

    def test_get_user_commission_rate_for_um_server_error(self):
        """Test that get_user_commission_rate_for_um() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
        }

        mock_error = Exception("ResponseError")
        self.client.get_user_commission_rate_for_um = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_user_commission_rate_for_um(**params)

    @patch("binance_common.utils.get_signature")
    def test_margin_max_borrow_success(self, mock_get_signature):
        """Test margin_max_borrow() successfully with required parameters only."""

        params = {
            "asset": "asset_example",
        }

        expected_response = {"amount": "1.69248805", "borrowLimit": "60"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_max_borrow(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/margin/maxBorrowable" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["asset"] == "asset_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginMaxBorrowResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = MarginMaxBorrowResponse.from_dict(expected_response)
        else:
            expected = MarginMaxBorrowResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_margin_max_borrow_success_with_optional_params(self, mock_get_signature):
        """Test margin_max_borrow() successfully with optional parameters."""

        params = {"asset": "asset_example", "recv_window": 5000}

        expected_response = {"amount": "1.69248805", "borrowLimit": "60"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_max_borrow(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/margin/maxBorrowable" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginMaxBorrowResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = MarginMaxBorrowResponse.from_dict(expected_response)
        else:
            expected = MarginMaxBorrowResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_margin_max_borrow_missing_required_param_asset(self):
        """Test that margin_max_borrow() raises RequiredError when 'asset' is missing."""
        params = {
            "asset": "asset_example",
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.margin_max_borrow(**params)

    def test_margin_max_borrow_server_error(self):
        """Test that margin_max_borrow() raises an error when the server returns an error."""

        params = {
            "asset": "asset_example",
        }

        mock_error = Exception("ResponseError")
        self.client.margin_max_borrow = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.margin_max_borrow(**params)

    @patch("binance_common.utils.get_signature")
    def test_portfolio_margin_um_trading_quantitative_rules_indicators_success(
        self, mock_get_signature
    ):
        """Test portfolio_margin_um_trading_quantitative_rules_indicators() successfully with required parameters only."""

        expected_response = {
            "indicators": {
                "BTCUSDT": [
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "UFR",
                        "value": 0.05,
                        "triggerValue": 0.995,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "IFER",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "GCR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "DR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                ],
                "ACCOUNT": [
                    {
                        "indicator": "TMV",
                        "value": 10,
                        "triggerValue": 1,
                        "plannedRecoverTime": 1644919865000,
                        "isLocked": True,
                    }
                ],
            },
            "updateTime": 1644913304748,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = (
            self.client.portfolio_margin_um_trading_quantitative_rules_indicators()
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/apiTradingStatus" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(
            PortfolioMarginUmTradingQuantitativeRulesIndicatorsResponse
        )

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = (
                PortfolioMarginUmTradingQuantitativeRulesIndicatorsResponse.from_dict(
                    expected_response
                )
            )
        else:
            expected = PortfolioMarginUmTradingQuantitativeRulesIndicatorsResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_portfolio_margin_um_trading_quantitative_rules_indicators_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test portfolio_margin_um_trading_quantitative_rules_indicators() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = {
            "indicators": {
                "BTCUSDT": [
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "UFR",
                        "value": 0.05,
                        "triggerValue": 0.995,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "IFER",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "GCR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                    {
                        "isLocked": True,
                        "plannedRecoverTime": 1545741270000,
                        "indicator": "DR",
                        "value": 0.99,
                        "triggerValue": 0.99,
                    },
                ],
                "ACCOUNT": [
                    {
                        "indicator": "TMV",
                        "value": 10,
                        "triggerValue": 1,
                        "plannedRecoverTime": 1644919865000,
                        "isLocked": True,
                    }
                ],
            },
            "updateTime": 1644913304748,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = (
            self.client.portfolio_margin_um_trading_quantitative_rules_indicators(
                **params
            )
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/apiTradingStatus" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(
            PortfolioMarginUmTradingQuantitativeRulesIndicatorsResponse
        )

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = (
                PortfolioMarginUmTradingQuantitativeRulesIndicatorsResponse.from_dict(
                    expected_response
                )
            )
        else:
            expected = PortfolioMarginUmTradingQuantitativeRulesIndicatorsResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_portfolio_margin_um_trading_quantitative_rules_indicators_server_error(
        self,
    ):
        """Test that portfolio_margin_um_trading_quantitative_rules_indicators() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.portfolio_margin_um_trading_quantitative_rules_indicators = (
            MagicMock(side_effect=mock_error)
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.portfolio_margin_um_trading_quantitative_rules_indicators()

    @patch("binance_common.utils.get_signature")
    def test_query_cm_position_information_success(self, mock_get_signature):
        """Test query_cm_position_information() successfully with required parameters only."""

        expected_response = [
            {
                "symbol": "BTCUSD_201225",
                "positionAmt": "1",
                "entryPrice": "11707.70000003",
                "markPrice": "11788.66626667",
                "unRealizedProfit": "0.00005866",
                "liquidationPrice": "6170.20509059",
                "leverage": "125",
                "positionSide": "LONG",
                "updateTime": 1627026881327,
                "maxQty": "50",
                "notionalValue": "0.00084827",
            },
            {
                "symbol": "BTCUSD_201225",
                "positionAmt": "1",
                "entryPrice": "11707.70000003",
                "markPrice": "11788.66626667",
                "unRealizedProfit": "0.00005866",
                "liquidationPrice": "6170.20509059",
                "leverage": "125",
                "positionSide": "LONG",
                "updateTime": 1627026881327,
                "maxQty": "50",
                "notionalValue": "0.00084827",
            },
            {
                "symbol": "BTCUSD_201225",
                "positionAmt": "1",
                "entryPrice": "11707.70000003",
                "markPrice": "11788.66626667",
                "unRealizedProfit": "0.00005866",
                "liquidationPrice": "6170.20509059",
                "leverage": "125",
                "positionSide": "LONG",
                "updateTime": 1627026881327,
                "maxQty": "50",
                "notionalValue": "0.00084827",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_cm_position_information()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/positionRisk" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryCmPositionInformationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryCmPositionInformationResponse.from_dict(expected_response)
        else:
            expected = QueryCmPositionInformationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_cm_position_information_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_cm_position_information() successfully with optional parameters."""

        params = {
            "margin_asset": "margin_asset_example",
            "pair": "pair_example",
            "recv_window": 5000,
        }

        expected_response = [
            {
                "symbol": "BTCUSD_201225",
                "positionAmt": "1",
                "entryPrice": "11707.70000003",
                "markPrice": "11788.66626667",
                "unRealizedProfit": "0.00005866",
                "liquidationPrice": "6170.20509059",
                "leverage": "125",
                "positionSide": "LONG",
                "updateTime": 1627026881327,
                "maxQty": "50",
                "notionalValue": "0.00084827",
            },
            {
                "symbol": "BTCUSD_201225",
                "positionAmt": "1",
                "entryPrice": "11707.70000003",
                "markPrice": "11788.66626667",
                "unRealizedProfit": "0.00005866",
                "liquidationPrice": "6170.20509059",
                "leverage": "125",
                "positionSide": "LONG",
                "updateTime": 1627026881327,
                "maxQty": "50",
                "notionalValue": "0.00084827",
            },
            {
                "symbol": "BTCUSD_201225",
                "positionAmt": "1",
                "entryPrice": "11707.70000003",
                "markPrice": "11788.66626667",
                "unRealizedProfit": "0.00005866",
                "liquidationPrice": "6170.20509059",
                "leverage": "125",
                "positionSide": "LONG",
                "updateTime": 1627026881327,
                "maxQty": "50",
                "notionalValue": "0.00084827",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_cm_position_information(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/cm/positionRisk" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryCmPositionInformationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryCmPositionInformationResponse.from_dict(expected_response)
        else:
            expected = QueryCmPositionInformationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_cm_position_information_server_error(self):
        """Test that query_cm_position_information() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_cm_position_information = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_cm_position_information()

    @patch("binance_common.utils.get_signature")
    def test_query_margin_loan_record_success(self, mock_get_signature):
        """Test query_margin_loan_record() successfully with required parameters only."""

        params = {
            "asset": "asset_example",
        }

        expected_response = {
            "rows": [
                {
                    "txId": 12807067523,
                    "asset": "BNB",
                    "principal": "0.84624403",
                    "timestamp": 1555056425000,
                    "status": "CONFIRMED",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_loan_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/margin/marginLoan" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["asset"] == "asset_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginLoanRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryMarginLoanRecordResponse.from_dict(expected_response)
        else:
            expected = QueryMarginLoanRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_margin_loan_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_margin_loan_record() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "tx_id": 1,
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "archived": "",
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "txId": 12807067523,
                    "asset": "BNB",
                    "principal": "0.84624403",
                    "timestamp": 1555056425000,
                    "status": "CONFIRMED",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_loan_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/margin/marginLoan" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginLoanRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryMarginLoanRecordResponse.from_dict(expected_response)
        else:
            expected = QueryMarginLoanRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_margin_loan_record_missing_required_param_asset(self):
        """Test that query_margin_loan_record() raises RequiredError when 'asset' is missing."""
        params = {
            "asset": "asset_example",
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.query_margin_loan_record(**params)

    def test_query_margin_loan_record_server_error(self):
        """Test that query_margin_loan_record() raises an error when the server returns an error."""

        params = {
            "asset": "asset_example",
        }

        mock_error = Exception("ResponseError")
        self.client.query_margin_loan_record = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_margin_loan_record(**params)

    @patch("binance_common.utils.get_signature")
    def test_query_margin_max_withdraw_success(self, mock_get_signature):
        """Test query_margin_max_withdraw() successfully with required parameters only."""

        params = {
            "asset": "asset_example",
        }

        expected_response = {"amount": "60"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_max_withdraw(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/margin/maxWithdraw" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["asset"] == "asset_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginMaxWithdrawResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryMarginMaxWithdrawResponse.from_dict(expected_response)
        else:
            expected = QueryMarginMaxWithdrawResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_margin_max_withdraw_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_margin_max_withdraw() successfully with optional parameters."""

        params = {"asset": "asset_example", "recv_window": 5000}

        expected_response = {"amount": "60"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_max_withdraw(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/margin/maxWithdraw" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginMaxWithdrawResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryMarginMaxWithdrawResponse.from_dict(expected_response)
        else:
            expected = QueryMarginMaxWithdrawResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_margin_max_withdraw_missing_required_param_asset(self):
        """Test that query_margin_max_withdraw() raises RequiredError when 'asset' is missing."""
        params = {
            "asset": "asset_example",
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.query_margin_max_withdraw(**params)

    def test_query_margin_max_withdraw_server_error(self):
        """Test that query_margin_max_withdraw() raises an error when the server returns an error."""

        params = {
            "asset": "asset_example",
        }

        mock_error = Exception("ResponseError")
        self.client.query_margin_max_withdraw = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_margin_max_withdraw(**params)

    @patch("binance_common.utils.get_signature")
    def test_query_margin_repay_record_success(self, mock_get_signature):
        """Test query_margin_repay_record() successfully with required parameters only."""

        params = {
            "asset": "asset_example",
        }

        expected_response = {
            "rows": [
                {
                    "amount": "14.00000000",
                    "asset": "BNB",
                    "interest": "0.01866667",
                    "principal": "13.98133333",
                    "status": "CONFIRMED",
                    "timestamp": 1563438204000,
                    "txId": 2970933056,
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_repay_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/margin/repayLoan" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["asset"] == "asset_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginRepayRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryMarginRepayRecordResponse.from_dict(expected_response)
        else:
            expected = QueryMarginRepayRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_margin_repay_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_margin_repay_record() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "tx_id": 1,
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "archived": "",
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "amount": "14.00000000",
                    "asset": "BNB",
                    "interest": "0.01866667",
                    "principal": "13.98133333",
                    "status": "CONFIRMED",
                    "timestamp": 1563438204000,
                    "txId": 2970933056,
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_repay_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/margin/repayLoan" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginRepayRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryMarginRepayRecordResponse.from_dict(expected_response)
        else:
            expected = QueryMarginRepayRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_margin_repay_record_missing_required_param_asset(self):
        """Test that query_margin_repay_record() raises RequiredError when 'asset' is missing."""
        params = {
            "asset": "asset_example",
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.query_margin_repay_record(**params)

    def test_query_margin_repay_record_server_error(self):
        """Test that query_margin_repay_record() raises an error when the server returns an error."""

        params = {
            "asset": "asset_example",
        }

        mock_error = Exception("ResponseError")
        self.client.query_margin_repay_record = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_margin_repay_record(**params)

    @patch("binance_common.utils.get_signature")
    def test_query_portfolio_margin_negative_balance_interest_history_success(
        self, mock_get_signature
    ):
        """Test query_portfolio_margin_negative_balance_interest_history() successfully with required parameters only."""

        expected_response = [
            {
                "asset": "USDT",
                "interest": "24.4440",
                "interestAccuredTime": 1670227200000,
                "interestRate": "0.0001164",
                "principal": "210000",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = (
            self.client.query_portfolio_margin_negative_balance_interest_history()
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/portfolio/interest-history" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(
            QueryPortfolioMarginNegativeBalanceInterestHistoryResponse
        )

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = (
                QueryPortfolioMarginNegativeBalanceInterestHistoryResponse.from_dict(
                    expected_response
                )
            )
        else:
            expected = QueryPortfolioMarginNegativeBalanceInterestHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_portfolio_margin_negative_balance_interest_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_portfolio_margin_negative_balance_interest_history() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = [
            {
                "asset": "USDT",
                "interest": "24.4440",
                "interestAccuredTime": 1670227200000,
                "interestRate": "0.0001164",
                "principal": "210000",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_portfolio_margin_negative_balance_interest_history(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/portfolio/interest-history" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(
            QueryPortfolioMarginNegativeBalanceInterestHistoryResponse
        )

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = (
                QueryPortfolioMarginNegativeBalanceInterestHistoryResponse.from_dict(
                    expected_response
                )
            )
        else:
            expected = QueryPortfolioMarginNegativeBalanceInterestHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_portfolio_margin_negative_balance_interest_history_server_error(
        self,
    ):
        """Test that query_portfolio_margin_negative_balance_interest_history() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_portfolio_margin_negative_balance_interest_history = (
            MagicMock(side_effect=mock_error)
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_portfolio_margin_negative_balance_interest_history()

    @patch("binance_common.utils.get_signature")
    def test_query_um_position_information_success(self, mock_get_signature):
        """Test query_um_position_information() successfully with required parameters only."""

        expected_response = [
            {
                "entryPrice": "0.00000",
                "leverage": "10",
                "markPrice": "6679.50671178",
                "maxNotionalValue": "20000000",
                "positionAmt": "0.000",
                "notional": "0",
                "symbol": "BTCUSDT",
                "unRealizedProfit": "0.00000000",
                "liquidationPrice": "6170.20509059",
                "positionSide": "BOTH",
                "updateTime": 1625474304765,
            },
            {
                "symbol": "BTCUSDT",
                "positionAmt": "0.001",
                "entryPrice": "22185.2",
                "markPrice": "21123.05052574",
                "unRealizedProfit": "-1.06214947",
                "liquidationPrice": "6170.20509059",
                "leverage": "4",
                "maxNotionalValue": "100000000",
                "positionSide": "LONG",
                "notional": "21.12305052",
                "updateTime": 1655217461579,
            },
            {
                "symbol": "BTCUSDT",
                "positionAmt": "0.000",
                "entryPrice": "0.0",
                "markPrice": "21123.05052574",
                "unRealizedProfit": "0.00000000",
                "liquidationPrice": "6170.20509059",
                "leverage": "4",
                "maxNotionalValue": "100000000",
                "positionSide": "SHORT",
                "notional": "0",
                "updateTime": 0,
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_um_position_information()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/positionRisk" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUmPositionInformationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryUmPositionInformationResponse.from_dict(expected_response)
        else:
            expected = QueryUmPositionInformationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_um_position_information_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_um_position_information() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = [
            {
                "entryPrice": "0.00000",
                "leverage": "10",
                "markPrice": "6679.50671178",
                "maxNotionalValue": "20000000",
                "positionAmt": "0.000",
                "notional": "0",
                "symbol": "BTCUSDT",
                "unRealizedProfit": "0.00000000",
                "liquidationPrice": "6170.20509059",
                "positionSide": "BOTH",
                "updateTime": 1625474304765,
            },
            {
                "symbol": "BTCUSDT",
                "positionAmt": "0.001",
                "entryPrice": "22185.2",
                "markPrice": "21123.05052574",
                "unRealizedProfit": "-1.06214947",
                "liquidationPrice": "6170.20509059",
                "leverage": "4",
                "maxNotionalValue": "100000000",
                "positionSide": "LONG",
                "notional": "21.12305052",
                "updateTime": 1655217461579,
            },
            {
                "symbol": "BTCUSDT",
                "positionAmt": "0.000",
                "entryPrice": "0.0",
                "markPrice": "21123.05052574",
                "unRealizedProfit": "0.00000000",
                "liquidationPrice": "6170.20509059",
                "leverage": "4",
                "maxNotionalValue": "100000000",
                "positionSide": "SHORT",
                "notional": "0",
                "updateTime": 0,
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_um_position_information(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/positionRisk" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUmPositionInformationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryUmPositionInformationResponse.from_dict(expected_response)
        else:
            expected = QueryUmPositionInformationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_um_position_information_server_error(self):
        """Test that query_um_position_information() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_um_position_information = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_um_position_information()

    @patch("binance_common.utils.get_signature")
    def test_query_user_negative_balance_auto_exchange_record_success(
        self, mock_get_signature
    ):
        """Test query_user_negative_balance_auto_exchange_record() successfully with required parameters only."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        expected_response = {
            "total": 2,
            "rows": [
                {
                    "startTime": 1736263046841,
                    "endTime": 1736263248179,
                    "details": [
                        {
                            "asset": "ETH",
                            "negativeBalance": 18,
                            "negativeMaxThreshold": 5,
                        }
                    ],
                },
                {
                    "startTime": 1736184913252,
                    "endTime": 1736184965474,
                    "details": [
                        {
                            "asset": "BNB",
                            "negativeBalance": 1.10264488,
                            "negativeMaxThreshold": 0,
                        }
                    ],
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_negative_balance_auto_exchange_record(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/papi/v1/portfolio/negative-balance-exchange-record"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"
        assert normalized["startTime"] == 1623319461670
        assert normalized["endTime"] == 1641782889000

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserNegativeBalanceAutoExchangeRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryUserNegativeBalanceAutoExchangeRecordResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                QueryUserNegativeBalanceAutoExchangeRecordResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_user_negative_balance_auto_exchange_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_user_negative_balance_auto_exchange_record() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "recv_window": 5000,
        }

        expected_response = {
            "total": 2,
            "rows": [
                {
                    "startTime": 1736263046841,
                    "endTime": 1736263248179,
                    "details": [
                        {
                            "asset": "ETH",
                            "negativeBalance": 18,
                            "negativeMaxThreshold": 5,
                        }
                    ],
                },
                {
                    "startTime": 1736184913252,
                    "endTime": 1736184965474,
                    "details": [
                        {
                            "asset": "BNB",
                            "negativeBalance": 1.10264488,
                            "negativeMaxThreshold": 0,
                        }
                    ],
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_negative_balance_auto_exchange_record(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/papi/v1/portfolio/negative-balance-exchange-record"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserNegativeBalanceAutoExchangeRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryUserNegativeBalanceAutoExchangeRecordResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                QueryUserNegativeBalanceAutoExchangeRecordResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_query_user_negative_balance_auto_exchange_record_missing_required_param_start_time(
        self,
    ):
        """Test that query_user_negative_balance_auto_exchange_record() raises RequiredError when 'start_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["start_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'start_time'"
        ):
            self.client.query_user_negative_balance_auto_exchange_record(**params)

    def test_query_user_negative_balance_auto_exchange_record_missing_required_param_end_time(
        self,
    ):
        """Test that query_user_negative_balance_auto_exchange_record() raises RequiredError when 'end_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["end_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'end_time'"
        ):
            self.client.query_user_negative_balance_auto_exchange_record(**params)

    def test_query_user_negative_balance_auto_exchange_record_server_error(self):
        """Test that query_user_negative_balance_auto_exchange_record() raises an error when the server returns an error."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        mock_error = Exception("ResponseError")
        self.client.query_user_negative_balance_auto_exchange_record = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_user_negative_balance_auto_exchange_record(**params)

    @patch("binance_common.utils.get_signature")
    def test_query_user_rate_limit_success(self, mock_get_signature):
        """Test query_user_rate_limit() successfully with required parameters only."""

        expected_response = [
            {
                "rateLimitType": "ORDERS",
                "interval": "MINUTE",
                "intervalNum": 1,
                "limit": 1200,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_rate_limit()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/rateLimit/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserRateLimitResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryUserRateLimitResponse.from_dict(expected_response)
        else:
            expected = QueryUserRateLimitResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_user_rate_limit_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_user_rate_limit() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = [
            {
                "rateLimitType": "ORDERS",
                "interval": "MINUTE",
                "intervalNum": 1,
                "limit": 1200,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_rate_limit(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/rateLimit/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserRateLimitResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = QueryUserRateLimitResponse.from_dict(expected_response)
        else:
            expected = QueryUserRateLimitResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_user_rate_limit_server_error(self):
        """Test that query_user_rate_limit() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_user_rate_limit = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_user_rate_limit()

    @patch("binance_common.utils.get_signature")
    def test_repay_futures_negative_balance_success(self, mock_get_signature):
        """Test repay_futures_negative_balance() successfully with required parameters only."""

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.repay_futures_negative_balance()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/repay-futures-negative-balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RepayFuturesNegativeBalanceResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = RepayFuturesNegativeBalanceResponse.from_dict(expected_response)
        else:
            expected = RepayFuturesNegativeBalanceResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_repay_futures_negative_balance_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test repay_futures_negative_balance() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.repay_futures_negative_balance(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/repay-futures-negative-balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RepayFuturesNegativeBalanceResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = RepayFuturesNegativeBalanceResponse.from_dict(expected_response)
        else:
            expected = RepayFuturesNegativeBalanceResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_repay_futures_negative_balance_server_error(self):
        """Test that repay_futures_negative_balance() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.repay_futures_negative_balance = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.repay_futures_negative_balance()

    @patch("binance_common.utils.get_signature")
    def test_um_futures_account_configuration_success(self, mock_get_signature):
        """Test um_futures_account_configuration() successfully with required parameters only."""

        expected_response = {
            "feeTier": 0,
            "canTrade": True,
            "canDeposit": True,
            "canWithdraw": True,
            "dualSidePosition": True,
            "updateTime": 1724416653850,
            "multiAssetsMargin": False,
            "tradeGroupId": -1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.um_futures_account_configuration()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/accountConfig" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UmFuturesAccountConfigurationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = UmFuturesAccountConfigurationResponse.from_dict(
                expected_response
            )
        else:
            expected = UmFuturesAccountConfigurationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_um_futures_account_configuration_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test um_futures_account_configuration() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "feeTier": 0,
            "canTrade": True,
            "canDeposit": True,
            "canWithdraw": True,
            "dualSidePosition": True,
            "updateTime": 1724416653850,
            "multiAssetsMargin": False,
            "tradeGroupId": -1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.um_futures_account_configuration(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/accountConfig" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UmFuturesAccountConfigurationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = UmFuturesAccountConfigurationResponse.from_dict(
                expected_response
            )
        else:
            expected = UmFuturesAccountConfigurationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_um_futures_account_configuration_server_error(self):
        """Test that um_futures_account_configuration() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.um_futures_account_configuration = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.um_futures_account_configuration()

    @patch("binance_common.utils.get_signature")
    def test_um_futures_symbol_configuration_success(self, mock_get_signature):
        """Test um_futures_symbol_configuration() successfully with required parameters only."""

        expected_response = [
            {
                "symbol": "BTCUSDT",
                "marginType": "CROSSED",
                "isAutoAddMargin": "False",
                "leverage": 21,
                "maxNotionalValue": "1000000",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.um_futures_symbol_configuration()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/symbolConfig" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UmFuturesSymbolConfigurationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = UmFuturesSymbolConfigurationResponse.from_dict(expected_response)
        else:
            expected = UmFuturesSymbolConfigurationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_um_futures_symbol_configuration_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test um_futures_symbol_configuration() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = [
            {
                "symbol": "BTCUSDT",
                "marginType": "CROSSED",
                "isAutoAddMargin": "False",
                "leverage": 21,
                "maxNotionalValue": "1000000",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.um_futures_symbol_configuration(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/symbolConfig" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UmFuturesSymbolConfigurationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = UmFuturesSymbolConfigurationResponse.from_dict(expected_response)
        else:
            expected = UmFuturesSymbolConfigurationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_um_futures_symbol_configuration_server_error(self):
        """Test that um_futures_symbol_configuration() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.um_futures_symbol_configuration = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.um_futures_symbol_configuration()

    @patch("binance_common.utils.get_signature")
    def test_um_notional_and_leverage_brackets_success(self, mock_get_signature):
        """Test um_notional_and_leverage_brackets() successfully with required parameters only."""

        expected_response = [
            {
                "symbol": "ETHUSDT",
                "notionalCoef": "4.0",
                "brackets": [
                    {
                        "bracket": 1,
                        "initialLeverage": 75,
                        "notionalCap": 10000,
                        "notionalFloor": 0,
                        "maintMarginRatio": 0.0065,
                        "cum": 0,
                    }
                ],
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.um_notional_and_leverage_brackets()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/leverageBracket" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UmNotionalAndLeverageBracketsResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = UmNotionalAndLeverageBracketsResponse.from_dict(
                expected_response
            )
        else:
            expected = UmNotionalAndLeverageBracketsResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_um_notional_and_leverage_brackets_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test um_notional_and_leverage_brackets() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = [
            {
                "symbol": "ETHUSDT",
                "notionalCoef": "4.0",
                "brackets": [
                    {
                        "bracket": 1,
                        "initialLeverage": 75,
                        "notionalCap": 10000,
                        "notionalFloor": 0,
                        "maintMarginRatio": 0.0065,
                        "cum": 0,
                    }
                ],
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.um_notional_and_leverage_brackets(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/papi/v1/um/leverageBracket" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UmNotionalAndLeverageBracketsResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = UmNotionalAndLeverageBracketsResponse.from_dict(
                expected_response
            )
        else:
            expected = UmNotionalAndLeverageBracketsResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_um_notional_and_leverage_brackets_server_error(self):
        """Test that um_notional_and_leverage_brackets() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.um_notional_and_leverage_brackets = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.um_notional_and_leverage_brackets()
