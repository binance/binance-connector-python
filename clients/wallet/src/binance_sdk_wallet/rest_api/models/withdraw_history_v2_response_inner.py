# coding: utf-8

"""
Binance Wallet REST API

OpenAPI Specification for the Binance Wallet REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class WithdrawHistoryV2ResponseInner(BaseModel):
    """
    WithdrawHistoryV2ResponseInner
    """  # noqa: E501

    id: Optional[StrictStr] = None
    trId: Optional[StrictInt] = Field(default=None, alias="trId")
    amount: Optional[StrictStr] = None
    transactionFee: Optional[StrictStr] = Field(default=None, alias="transactionFee")
    coin: Optional[StrictStr] = None
    withdrawalStatus: Optional[StrictInt] = Field(
        default=None, alias="withdrawalStatus"
    )
    travelRuleStatus: Optional[StrictInt] = Field(
        default=None, alias="travelRuleStatus"
    )
    address: Optional[StrictStr] = None
    addressTag: Optional[StrictStr] = Field(default=None, alias="addressTag")
    txId: Optional[StrictStr] = Field(default=None, alias="txId")
    applyTime: Optional[StrictStr] = Field(default=None, alias="applyTime")
    network: Optional[StrictStr] = None
    transferType: Optional[StrictInt] = Field(default=None, alias="transferType")
    withdrawOrderId: Optional[StrictStr] = Field(default=None, alias="withdrawOrderId")
    info: Optional[StrictStr] = None
    confirmNo: Optional[StrictInt] = Field(default=None, alias="confirmNo")
    walletType: Optional[StrictInt] = Field(default=None, alias="walletType")
    txKey: Optional[StrictStr] = Field(default=None, alias="txKey")
    questionnaire: Optional[StrictStr] = None
    completeTime: Optional[StrictStr] = Field(default=None, alias="completeTime")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "id",
        "trId",
        "amount",
        "transactionFee",
        "coin",
        "withdrawalStatus",
        "travelRuleStatus",
        "address",
        "addressTag",
        "txId",
        "applyTime",
        "network",
        "transferType",
        "withdrawOrderId",
        "info",
        "confirmNo",
        "walletType",
        "txKey",
        "questionnaire",
        "completeTime",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def is_array(cls) -> bool:
        return False

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WithdrawHistoryV2ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WithdrawHistoryV2ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "trId": obj.get("trId"),
                "amount": obj.get("amount"),
                "transactionFee": obj.get("transactionFee"),
                "coin": obj.get("coin"),
                "withdrawalStatus": obj.get("withdrawalStatus"),
                "travelRuleStatus": obj.get("travelRuleStatus"),
                "address": obj.get("address"),
                "addressTag": obj.get("addressTag"),
                "txId": obj.get("txId"),
                "applyTime": obj.get("applyTime"),
                "network": obj.get("network"),
                "transferType": obj.get("transferType"),
                "withdrawOrderId": obj.get("withdrawOrderId"),
                "info": obj.get("info"),
                "confirmNo": obj.get("confirmNo"),
                "walletType": obj.get("walletType"),
                "txKey": obj.get("txKey"),
                "questionnaire": obj.get("questionnaire"),
                "completeTime": obj.get("completeTime"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
